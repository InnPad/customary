<script type="text/javascript">
    Ext.define('Ext.custom.Application', function () {

        @Html.PartialScript("~/Views/Ext/ApplicationLibrary.cshtml")

        return {
            name: 'Customary',
            extend: 'Ext.app.Application',
            requires: [
                'Ext.container.Viewport',
            ],
            uses: [
                'Ext.custom.Adapter',
                'Ext.custom.Droplet'
            ],
            statics: {
                asyncMetadata: asyncMetadata,
                asyncModel: asyncModel,
                collectProperties: collectProperties,
                configGrid: configGrid,
                defineModel: defineModel,
                findMetadata: findMetadata,
                findModel: findModel,
                javascriptDecode: javascriptDecode,
                javascriptEncode: javascriptEncode,
                makeExtName: makeExtName,
                makeModelName: makeModelName,
                selectColumns: selectColumns,
                splitRole: splitRole,
                switchValues: switchValues,
                toDataType: toDataType
            },
            culture: 'en',
            dirty: false,
            appFolder: '/Scripts/Ext/custom',
            appProperty: 'current',
            //models: ['Post', 'Comment'],
            //controllers: ['Droplet'/*, 'Comments'*/],
            launch: function () {

                // Apply a set of config properties to the singleton
                /*Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
                    //maxWidth: 600,
                    //minWidth: 300,
                    //mouseOffset: [50, 50],
                    //showDelay: 50      // Show 50ms after entering target
                });*/

                var directory = Ext.create('Ext.custom.Directory');

                this.centerPanel = Ext.create('Ext.panel.Panel', {
                    region: 'center',
                    bodyStyle: frameStyle, // background color like frame
                    header: true,
                    items: [],
                    flex: 4,
                    border: false,
                    layout: 'fit',
                    title: 'Empty View'
                });

                Ext.create('Ext.container.Viewport', {
                    layout: 'border',
                    bodyStyle: frameStyle, // background color like frame
                    items: [
                        /*{
                            region: 'north',
                            xtype: 'container',
                            bodyStyle: frameStyle, // background color like frame
                            html: 'Html.Partial("~/Views/Ext/Header.cshtml")',
                            autoHeight: true,
                            border: false,
                            margins: '0 0 5 0'
                        },*/
                        directory.initComponent({
                            activeTab: 0,
                            bodyStyle: frameStyle, // background color like frame
                            bodyBorder: false,
                            border: false,
                            collapsible: true,
                            /*tbar: {
                                xtype: 'toolbar',
                                dock: 'top',
                                layout: {
                                    align: 'center'
                                },
                                items: [
                                    {
                                        text: 'Data Dictionary',
                                        xtype: 'text'
                                    }
                                ],
                                //margin: '6 0 3 0',
                                //ui: 'header'
                            },*/
                            flex: 3,
                            header: false,
                            layout: 'fit',
                            listeners: {
                                beforeselect: {
                                    fn: function (callback, scope) {

                                        if (typeof this._droplet !== 'object' || this._droplet === null) {
                                            console.log('beforeselect: true 1');
                                            return true;
                                        }

                                        if (!this._droplet.isDirty()) {
                                            console.log('beforeselect: true 2');
                                            return true;
                                        }

                                        Ext.MessageBox.show({
                                            closable: false,
                                            title: 'Save Changes?',
                                            msg: 'Your moving out of a record that has unsaved changes. Would you like to save your changes?',
                                            width: 300,
                                            buttons: Ext.Msg.YESNOCANCEL,
                                            //multiline: true,
                                            scope: this,
                                            fn: function (buttonId, text, opt) {
                                                // The ID of the button pressed
                                                switch (buttonId) {
                                                    case 'ok':
                                                    case 'yes':
                                                        console.log("yes");
                                                        this._droplet._record.save({
                                                            callback: function (records, operation, success) {
                                                                success = operation.wasSuccessful();
                                                                if (success) {
                                                                    callback.call(scope, true);
                                                                }
                                                                else {
                                                                    // TODO: message with failure
                                                                    callback.call(scope, true);
                                                                }
                                                            },
                                                            scope: this
                                                        });
                                                        break;
                                                    case 'no':
                                                        callback.call(scope, true);
                                                        break;
                                                    case 'cancel':
                                                        callback.call(scope, false);
                                                        break;
                                                }
                                                // text : String
                                                // Value of the input field if either prompt or multiline is true
                                                // opt : Object
                                                // The config object passed to show.
                                            },
                                            //animEl: 'elId'
                                            //animateTarget: 'addAddressBtn',
                                            icon: Ext.window.MessageBox.INFO
                                        });

                                        console.log('beforeselect: false');

                                        return false;
                                    },
                                    scope: this
                                },
                                create: {
                                    fn: function (record, model) {
                                        selectRecord.call(this, record, model);
                                    },
                                    scope: this
                                },
                                select: {
                                    fn: function (component, eOpts) {
                                        if (typeof eOpts === 'object' && eOpts !== null) {

                                            if (typeof eOpts.Type !== 'string') {
                                                this.centerPanel.removeAll();
                                                this.centerPanel.doLayout();
                                                this.centerPanel.setTitle('Empty View');
                                            }
                                            else {
                                                var title = eOpts.Type + ' [' + eOpts.Id + ']';
                                                this.centerPanel.removeAll();
                                                this.centerPanel.setTitle(title + ' loading...');
                                                this.centerPanel.mask('Loading... Please wait', 'loading');
                                                Ext.custom.Droplet.asyncCreate(eOpts.Type, false, function (droplet) {
                                                    this._droplet = droplet;
                                                    this.centerPanel.add(droplet.initComponent({
                                                    }));
                                                    this.centerPanel.doLayout();

                                                    droplet.load(eOpts.Id, function () {
                                                        this.centerPanel.setTitle(title);
                                                        this.centerPanel.unmask();
                                                    }, this);
                                                    //droplet.asyncLoad(eOpts.id);
                                                }, this);
                                            }

                                        }
                                        else {

                                        }
                                    },
                                    scope: this
                                }
                                /*add: {
                                    fn: function (tabPanel, component, index, eOpts) {
                                        if (typeof tabPanel.title !== 'string') {
                                            tabPanel.setTitle(component.title);
                                        }
                                    },
                                    scope: this
                                },
                                tabchange: {
                                    fn: this.onViewTabChange,
                                    scope: this
                                }*/
                            },
                            margins: '26 0 0 5',
                            region: 'west',
                            split: true
                        }),
                        this.centerPanel,
                        {
                            bodyStyle: frameStyle, // background color like frame
                            bodyBorder: false,
                            border: false,
                            collapsible: true,
                            flex: 1,
                            header: false,
                            items: [
                            ],
                            layout: 'fit',
                            listeners: {
                                added: {
                                    fn: function (component, container, pos, eOpts) {
                                        Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
                                            closable: true,
                                            renderTo: component
                                            //maxWidth: 600,
                                            //minWidth: 300,
                                            //mouseOffset: [50, 50],
                                            //showDelay: 50      // Show 50ms after entering target
                                        });
                                        return true;
                                    },
                                    scope: this
                                },
                                boxready: {
                                    fn: function (component, width, height, eOpts) {
                                        console.log('boxready');
                                        Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
                                            closable: true,
                                            target: component.el,
                                            trackMouse: true,
                                            listeners: {              // Change content dynamically depending on which element triggered the show.
                                                beforeshow: function updateTipBody(tip) {
                                                    tip.update('Over company');// "' + view.getRecord(tip.triggerElement).get('company') + '"');
                                                }
                                            }
                                            //maxWidth: 600,
                                            //minWidth: 300,
                                            //mouseOffset: [50, 50],
                                            //showDelay: 50      // Show 50ms after entering target
                                        });
                                        return true;
                                    },
                                    scope: this
                                }
                            },
                            region: 'east',
                            split: true,
                            title: 'Help',
                            xtype: 'panel'
                        }
                    ]
                });
                window.onbeforeunload = function () {
                    if (Customary.current.dirty) {
                        return "You have made changes on this page that you have not yet confirmed. If you navigate away from this page you will lose your unsaved changes";
                    }
                };

                if (Ext.supports.History) { // <- this prevents the firing off of the event
                    Ext.History.init()
                    Ext.History.on('change', this.onHistoryChange);
                    /*Ext.custom.Adapter.subscribe('Customary.view.Directory.selectionchange', function (path) {
                        Ext.History.add(path)
                    });
                    Ext.custom.Adapter.subscribe('Customary.view.Index.selectionchange', function (id) {
                        Ext.History.add(path + '/' + id)
                    });*/
                }
                else {
                    /*Ext.custom.Adapter.subscribe('Customary.view.Index.selectionchange', function (id) {
                        this.onHistoryChange();
                    });*/

                    this.onHistoryChange();
                }
            },

            onHistoryChange: function (id) {

                var token = Ext.History.getToken();

                var path = token.split('/');

                if (typeof token === 'string') {

                    if (guidRegex.test(token)) {
                        console.log('token accepted');
                        this.onHistoryChange(token);
                    }
                    else {
                        //alert("Invalid token");
                        this.onHistoryChange();
                    }
                }
                else {
                }
            }
        }
    });
</script>
