<script type="text/javascript">

    Ext.define('Ext.custom.Droplet', function () {

        @Html.PartialScript("~/Views/Ext/DropletLibrary.cshtml")

        return {
            alias: ['Ext.custom.controller.Droplet'],

            /* begin controller part */

            extend: 'Ext.app.Controller',
            //views: ['posts.List', 'posts.Edit'],

            //the rest of the Controller here

            init: function () {
                this.control({
                    'viewport > panel': {
                        render: this.onPanelRendered
                    }
                });
            },

            onPanelRendered: function () {
                console.log('The panel was rendered');
            },

            /* end controller part */

            statics: {

                asyncCreate: function (typeName, readonly, callback, scope) {

                    Ext.custom.Application.asyncMetadata(typeName, function ($) {

                        var droplet = Ext.custom.Droplet.create(typeName, readonly, $);

                        callback.call(scope, droplet);
                    });
                },

                create: function (typeName, readonly, $) {

                    var modelName = Ext.custom.Application.makeModelName(typeName);

                    var model = Ext.ModelManager.getModel(modelName);

                    if (model === null || typeof model !== 'function') {

                        model = Ext.custom.Application.defineModel(modelName, $);
                    }

                    var droplet = new Ext.custom.Droplet(typeName, readonly, $, model);

                    return droplet;
                },

                // Convenience function to check if the form has any dirty fields. This is the same as calling this.getForm().isDirty().
                isDirty: isDirty,
            },

            constructor: function (typeName, readOnly, $, model) {

                this.name = Ext.custom.Application.makeExtName(typeName);
                this.typeName = typeName;
                this.readOnly = readOnly;
                this.$ = $;
                this.model = model;
                /* model has it's own store
                this.store = Ext.create('Ext.data.Store', {
                    // destroy the store if the grid is destroyed
                    autoDestroy: true,
                    autoLoad: true,
                    //autoSave: true,
                    autoSync: false,
                    batchActions: true,
                    //buffered: true,
                    model: model,
                    pageSize: 100,
                    listeners: {
                        add: {
                            fn: this.onDataChanged,
                            scope: this
                        },
                        datachanged: {
                            fn: this.onDataChanged,
                            scope: this
                        },
                        remove: {
                            fn: this.onDataChanged,
                            scope: this
                        },
                        update: {
                            fn: this.onDataChanged,
                            scope: this
                        },
                        write: function (proxy, operation) {
                            if (operation.action == 'remove') {
                                //master.child('#form').setActiveRecord(null);
                            }
                            //Ext.example.msg(operation.action, operation.resultSet.message);
                        }
                    },
                    sorters: [{
                        property: 'Name',
                        direction: 'ASC'
                    }]
                });*/
            },

            _record: null,

            _component: null,

            asyncLoad: function (id, callcack) {

                Ext.Ajax.request({
                    url: _baseUrl + '/Data/' + this.typeName + '/' + id + '/Read',
                    method: 'GET',
                    /*params: {
                        id: '00000000-0000-0000-0000-000000000001'
                    },*/
                    success: function (response, options) {
                        var text = response.responseText;
                        var json = Ext.JSON.decode(text, true);
                        if (json == null || typeof json !== 'object') {
                            alert(text);
                        }
                        else if (json.success === true && typeof json.data === 'object') {

                            this.load(id, json.data);

                        } else if (typeof json.message === 'string') {
                            alert(json.message);
                        }
                    },
                    failure: function (response, options) {
                    },
                    scope: this
                });

            },

            initComponent: function (customConfig) {

                var config = configDropletComponent.call(this, this.$);

                Ext.merge(config, {
                    layout: 'fit'
                },
                customConfig);

                this._component = Ext.widget(config);

                return this._component;
            },

            // Convenience function to check if the form has any dirty fields. This is the same as calling this.getForm().isDirty().
            isDirty: function (dirty) {

                //console.log('isDirty(' + dirty + ')');

                if (typeof dirty !== 'boolean') {
                    dirty = Ext.custom.Droplet.isDirty(this._component);
                }

                if (dirty) {
                    findToolItem('update', this._component, 'enable');
                }
                else {
                    findToolItem('update', this._component, 'disable');
                }

                return dirty;
            },

            loadRecord: function (record) {
                this._record = record;
                loadRecord(this._component, this._record);
            },

            load: function (id, callcack, scope) {
                this._id = id;
                this.model.load(id, {
                    failure: function (record, operation) {
                        //do something if the load failed
                        //record is null
                        loadRecord(this._component);
                    },
                    success: function (record, operation) {
                        //do something if the load succeeded
                        this._record = record;
                        loadRecord(this._component, record);
                    },
                    callback: function (record, operation, success) {
                        //do something whether the load succeeded or failed
                        //if operation is unsuccessful, record is null
                        if (typeof callcack === 'function') {
                            callcack.call(scope || this, record, operation, success);
                        }
                    },
                    scope: this
                });
            },

            onResetClick: function () {
                this.load(this._id);
            },

            onUpdateClick: function () {
                Ext.custom.Droplet.isDirty(this._component);
                this._record.save();
            },

            onRecordChanged: function (record) {

                if (record != null && typeof record == 'object' && typeof record.store === 'object' && typeof (record.Properties) === 'function') {

                    /*var fn = record[name];
    
                    if (fn !== null && typeof fn === 'function') {
    
                        store = fn.apply(record);
    
                        if (store != null && typeof store === 'object') {
    
                            store.on('datachanged', this.onDataChanged, this);
                            //store.on('add', this.onPropertyAdd, this);
                            //store.on('remove', this.onPropertyRemove, this);
                            //store.on('update', this.onPropertyUpdate, this);
                        }
                    }*/
                }
            },

            onDataChanged: function () {
            }
        };
    });
</script>
