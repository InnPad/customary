<script type="text/javascript">
    // Create model, grid and forms for data definitions

    Ext.define('Custom.data.Directory', function () {

        function fullName(node) {
            /// <param name="node" type="Ext.data.NodeInterface">
            /// </param>
            /// <returns type="String"></returns>
            var name = [];
            name.push(node.raw.text);
            for (node = node.parentNode; node; node = node.parentNode) {
                name.push(node.raw.text);
            }
            name.reverse();
            return name.join('/');
        };

        return {

            statics: {

                createPanel: function (directory, config) {

                    Ext.Object.merge(directory, {
                        buttons: {
                            refresh: Ext.create('Ext.Button', {
                                iconCls: 'icon-refresh',
                                text: 'Refresh',
                                scope: directory,
                                handler: directory.onRefreshClick
                            })
                        }
                    });

                    return Ext.create('Ext.tree.Panel',  Ext.Object.merge({
                        header: false,
                        store: directory.store,
                        rootVisible: false,
                        useArrows: true,
                        listeners: {
                            selectionchange: {
                                fn: directory.onSelectionChange,
                                scope: directory
                            }
                        },
                        dockedItems: [
                            {
                                xtype: 'toolbar',
                                dock: 'bottom',
                                ui: 'footer',
                                margin: '6 0 3 0',
                                items: ['->', directory.buttons.refresh]
                            }
                        ]
                    }, config));
                },

                createStore: function (directory) {

                    return Ext.create('Ext.data.TreeStore', {
                        id: 'Custom.data.Directory.Store',
                        autoLoad: true,
                        //defaultRootId: '0',
                        //defaultRootText: "text",
                        //defaultRootProperty: 'children',
                        folderSort: true,
                        // not using model. direct proxy
                        proxy: {
                            // Use for ajax proxy, since all the create, update and detroy requests will be all POST
                            // and for jsonp the api is the same, but the method is GET
                            type: 'ajax', // rest, jsonp or ajax. 
                            api: {
                                read: directory.baseUrl
                            },
                            buildUrl: function (request) {
                                switch (request.action) {
                                    case 'read':
                                        return directory.baseUrl + fullName(request.operation.node) + '/Children';
                                    default:
                                        return directory.baseUrl;
                                }
                            },
                            headers: {
                                "Accept": "application/json"
                            },
                            listeners: {
                                exception: function (proxy, response, operation) {
                                    Ext.MessageBox.show({
                                        title: 'REMOTE EXCEPTION',
                                        msg: operation.getError(),
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.Msg.OK
                                    });
                                }
                            },
                            reader: {
                                type: "json",
                                root: "data",
                                totalProperty: 'total',
                                successProperty: 'success',
                                messageProperty: 'message'
                            }
                        },
                        root: {
                            text: "", // has to be empty
                            expanded: true,
                            loaded: false,
                        }
                    });
                }
            },

            constructor: function () {
                this.baseUrl = 'http://data.customary.com';
                this.store = Custom.data.Directory.createStore(this);
                this.panel = Custom.data.Directory.createPanel(this);
            },

            onRefreshClick: function () {
                this.store.load();
                App.core.Adapter.publish('Custom.data.Directory.selectionchange', this.panel.selModel);
            },

            onSelectionChange: function (selModel, selections, opts) {
                if (typeof selections == 'object' && selections.length > 0 && typeof selections[0].raw == 'object') {
                    this.record = Ext.Object.merge({}, selections[0].raw);
                    App.core.Adapter.publish('Custom.data.Directory.selectionchange', this, selModel, selections);
                } else {
                    delete this.record;
                    App.core.Adapter.publish('Custom.data.Directory.selectionchange', this, selModel, selections);
                }
            }
        };

    });
</script>
