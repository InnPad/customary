@model Custom.Areas.Admin.Models.ModelViewModel
@{
    
    // Field
    Func<Custom.Areas.Admin.Models.FieldViewModel, object> Field = @<text>
    @if (item.Type == "string" && item.Convert == null)
            {
        @:'@item.Name'
            }
            else if (item.Convert == null)
            {
        @:{name: '@item.Name', type: '@item.Type'}
            }
            else
            {
        @:{
        @:   name: '@item.Name',
        @:   type: '@item.Type',
        @:   convert: function(inches) {
        @:      return Math.round(inches * 2.54);
        @:   }
        @:}
            }
    ]</text>;

// Fields
    Func<List<Custom.Areas.Admin.Models.FieldViewModel>, object> Fields = @<text>fields: [
        @for(var i = 0; i < item.Count; i++)
        {
            @Field(item[i])@item.NotLast(i, @<text>,</text>)
        }
    ]</text>;

// Proxy
    Func<Custom.Areas.Admin.Models.ProxyViewModel, object> Proxy = @<text>@if(item != null){ <text>,</text>
proxy: {
}
}</text>;

// Associations
    Func<List<Custom.Areas.Admin.Models.AssociationViewModel>, object> Associations = @<text>@if(item != null && item.Count > 0){@:,
        @:validations: [
        for(var i = 0; i < item.Count; i++)
        {
            var association = item[i];
        }
        @:]
    }</text>;

// Validations 
    Func<List<Custom.Areas.Admin.Models.ValidationViewModel>, object> Validations = @<text>@if (item != null && item.Count > 0) {@:,
        @:validations: [
        for (var i = 0; i < item.Count; i++)
        {
            var validation = item[i];
        }
        @:]
    }</text>;
}

Ext.regModel('@Model.ClassName', {
    @Fields(Model.Fields)@Proxy(Model.Proxy)@Associations(Model.Associations)@Validations(Model.Validations)
});