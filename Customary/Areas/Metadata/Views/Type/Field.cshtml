@model Custom.Site.Presentation.Sencha.Ext.data.Model
@using Custom.Areas.Metadata.Models
@using Custom.Data.Metadata
@using Custom.Site.Presentation
@using Ext = Custom.Site.Presentation.Sencha.Ext
<script type="text/javascript">
    Ext.define('App.metadata.type.Field', {
        extend: 'Ext.form.ComboBox',//'Ext.form.field.Trigger',
        alias: 'widget.typefield',
        requires: [
            'App.metadata.type.Proxy'
        ],
        //http://stackoverflow.com/questions/12658337/ext-form-field-combobox-tooltip-on-items
        displayField: 'text',
        valueField: 'value',
        //editable: false,
        autoSelect: true,
        typeAhead: true,
        forceSelection: true,
        pageSize: 50,
        listConfig: {
            loadingText: 'Searching...',
            emptyText: 'No matching posts found.',
            // Custom rendering template for each item
            getInnerTpl: function () {
                return '<b>{name} </b> ({namespace})';
            }
        },
        /*renderer: function (record) {
            return
        },*/

        //trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',

        //trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',

        //hasSearch: false,
        //paramName: 'query',

        initComponent: function (config) {

            Ext.define('App.metadata.type.Model', {
                extend: 'Ext.data.Model',
                fields: [
                    { name: 'id' },
                    { name: 'name' },
                    { name: 'namespace' },
                    {
                        name: 'text',
                        convert: function (value, record) {
                            return record.get('name') + ' (' + record.get('namespace') + ')';
                        }
                    },
                    {
                        name: 'value',
                        convert: function (value, record) {
                            return record.get('namespace') + '.' + record.get('name');
                        }
                    }
                ]
                //proxy: 'App.metadata.type.Proxy'
            });

            var proxy = Ext.create('App.metadata.type.Proxy');

            this.store = Ext.create('Ext.data.Store', {
                extend: 'Ext.data.Store',
                model: 'App.metadata.type.Model',
                proxy: Ext.create('App.metadata.type.Proxy'),
                autoLoad: true
            });

            Ext.apply(this, {
            });

            this.callParent();

            /*this.on('specialkey', function (f, e) {
                if (e.getKey() == e.ENTER) {
                    this.onTriggerClick();
                }
            }, this);*/
        }/*,

        afterRender: function () {
            this.callParent();
            this.triggerEl.item(0).setDisplayed('none');
        },

        onTriggerClick: function () {
            var me = this,
                store = me.store,
                proxy = store.getProxy(),
                value = me.getValue();

            if (value.length < 1) {
                me.onTrigger1Click();
                return;
            }
            //proxy.extraParams[me.paramName] = value;
            //proxy.extraParams.start = 0;
            store.load();
            me.hasSearch = true;
            me.triggerEl.item(0).setDisplayed('block');
            me.doComponentLayout();
        },

        onTrigger1Click: function () {
            var me = this,
                store = me.store,
                proxy = store.getProxy(),
                val;

            if (me.hasSearch) {
                me.setValue('');
                //proxy.extraParams[me.paramName] = '';
                //proxy.extraParams.start = 0;
                store.load();
                me.hasSearch = false;
                me.triggerEl.item(0).setDisplayed('none');
                me.doComponentLayout();
            }
        },

        onTrigger2Click: function () {
            var me = this,
                store = me.store,
                proxy = store.getProxy(),
                value = me.getValue();

            if (value.length < 1) {
                me.onTrigger1Click();
                return;
            }
            proxy.extraParams[me.paramName] = value;
            proxy.extraParams.start = 0;
            store.load();
            me.hasSearch = true;
            me.triggerEl.item(0).setDisplayed('block');
            me.doComponentLayout();
        }*/
    });
</script>
