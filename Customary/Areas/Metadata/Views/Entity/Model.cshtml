@model Custom.Data.Metadata.EventDescriptor
@using Custom.Areas.Metadata.Models
@using Custom.Data
@using Custom.Data.Metadata
@using Custom.Site.Presentation
@using Ext = Custom.Site.Presentation.Sencha.Ext
@{
    var descriptor = Model as EntityDescriptor;
}
@if (descriptor != null)
{
    var id = descriptor.Id.ToString("N");
    var model = new Custom.Site.Presentation.Sencha.Ext.data.Model();
    var builder = model.ToBuilder();

    var fields = model.Fields;

    foreach (var property in descriptor.Properties)
    {
        var type = property.PropertyType;
        var typeCategory = type.Split('.').First();
        var typeName = type.Split('.').Last();

        var field = new Custom.Site.Presentation.Sencha.Ext.data.Field();

        if (string.Equals("System", typeCategory, StringComparison.CurrentCultureIgnoreCase))
        {
            switch (typeName)
            {
                case "Boolean":
                    field.Type = "boolean";
                    break;

                case "Byte":
                case "Int16":
                case "Int32":
                case "Int64":
                case "SByte":
                case "UInt16":
                case "UInt32":
                case "UInt64":
                    field.Type = "int";
                    break;

                case "Double":
                case "Single":
                    field.Type = "float";
                    break;

                case "DateTime":
                    field.Type = "date";
                    break;

                case "Char":
                case "String":
                    field.Type = "string";
                    break;

                default:
                    field.Type = "auto";
                    break;
            }
        }
        else if (string.Equals("Custom", typeCategory, StringComparison.CurrentCultureIgnoreCase))
        {
            switch (typeName)
            {
                case "Data":
                    field.Type = "date";
                    break;

                case "Integer":
                    field.Type = "int";
                    break;

                case "Number":
                    field.Type = "int";
                    break;

                case "String":
                    field.Type = "string";
                    break;
            }
        }

        fields.Builder()
            .Name(property.Name)
            .DefaultValue(property.Default);
    }
    
    <script type="text/javascript">
        Ext.define('Custom.Metadata.Entity.Model.@id', {
            extend: 'Ext.data.Model',
            requires: [
            ],
            fields: [
            ],
            proxy: {
                // Use for ajax proxy, since all the create, update and detroy requests will be all POST
                // and for jsonp the api is the same, but the method is GET
                type: 'ajax', // rest, jsonp or ajax. 
                api: {
                    create: '@Url.Absolute("/Metadata/Entity/Create/" + id)',
                    read: '@Url.Absolute("/Metadata/Entity/Read/" + id)',
                    update: '@Url.Absolute("/Metadata/Entity/Update/" + id)',
                    destroy: '@Url.Absolute("/Metadata/Entity/Destroy/" + id)'
                },
                //url: path,
                autoLoad: true,
                headers: {
                    "Accept": "application/json"
                },
                listeners: {
                    exception: function (proxy, response, operation) {
                        Ext.MessageBox.show({
                            title: 'REMOTE EXCEPTION',
                            msg: operation.getError(),
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.Msg.OK
                        });
                    }
                },
                reader: {
                    type: "json",
                    root: "data",
                    idProperty: 'id',
                    //dateFormat: "",
                    totalProperty: 'total',
                    successProperty: 'success',
                    messageProperty: 'message'
                },
                writer: {
                    type: 'json',
                    root: 'data',
                    allowSingle: false, // force data to be array
                    //dateFormat: "",
                    writeAllFields: true,
                    writeRecordId: true
                }
            }
        });
    </script>
}
else
{
    <script type="text/javascript">
        Ext.define('Custom.Metadata.Entity.Model', {
            extend: 'Ext.data.Model',
            requires: [
                'App.metadata.association.Model',
                'App.metadata.property.Model',
                'App.core.Adapter'
            ],
            fields: [
                { name: 'id' },
                { name: 'Name' },
                { name: 'Masterdata', type: 'bool' },
                { name: 'Transactional', type: 'bool' },
                { name: 'Title' },
                {
                    name: 'titleText',
                    persist: false,
                    convert: function (value, record) {
                        return App.core.Adapter.text('Title', value, record);
                    }
                },
                //{ name: 'dep', type: 'auto' },
                //{ name: 'dep_id', type: 'int', mapping: 'dep.dep_id' },
                //{ name: 'dep_Name', type: 'string', mapping: 'dep.dep_Name' },
                { name: 'Summary' },
                {
                    name: 'summaryText',
                    persist: false,
                    convert: function (value, record) {
                        return App.core.Adapter.text('Summary', value, record);
                    }
                },
                { name: 'modifiedBy' },
                {
                    name: "modifiedOn",
                    type: "date",
                    dateFormat: "Y-m-d\\TH:i:s"
                },
                { name: "modifiedAt" },
                { name: "modifiedFor" },
                //{ name: 'properties' },
                //{ name: 'associations' }
            ],
            // belongTo: http://extjs-tutorials.blogspot.ca/2012/05/extjs-belongsto-association-rules.html
            hasMany: [
                { model: 'App.metadata.property.Model', name: 'Properties' }/*,
            { model: 'App.metadata.association.Model', name: 'associations' }*/
            ],/* carfull with validations. could conflix with detecting store changes
        validations: [
            {type: 'presence',  field: 'name'},
            { type: 'length', field: 'name', min: 2 },
            { type: 'presence', field: 'namespace' },
            { type: 'length', field: 'namespace', min: 2 }
            //{type: 'inclusion', field: 'gender',   list: ['Male', 'Female']},
            //{type: 'exclusion', field: 'username', list: ['Admin', 'Operator']},
            //{type: 'format',    field: 'username', matcher: /([a-z]+)[0-9]{2,3}/}
        ],*/
            proxy: {
                // Use for ajax proxy, since all the create, update and detroy requests will be all POST
                // and for jsonp the api is the same, but the method is GET
                type: 'ajax', // rest, jsonp or ajax. 
                api: {
                    create: '@Url.Absolute("/Metadata/Entity/Create")',
                read: '@Url.Absolute("/Metadata/Entity/Read")',
                update: '@Url.Absolute("/Metadata/Entity/Update")',
                destroy: '@Url.Absolute("/Metadata/Entity/Destroy")'
            },
                //url: path,
                autoLoad: true,
                headers: {
                    "Accept": "application/json"
                },
                listeners: {
                    exception: function (proxy, response, operation) {
                        Ext.MessageBox.show({
                            title: 'REMOTE EXCEPTION',
                            msg: operation.getError(),
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.Msg.OK
                        });
                    }
                },
                reader: {
                    type: "json",
                    root: "data",
                    idProperty: 'id',
                    //dateFormat: "",
                    totalProperty: 'total',
                    successProperty: 'success',
                    messageProperty: 'message'
                },
                writer: {
                    type: 'json',
                    root: 'data',
                    allowSingle: false, // force data to be array
                    //dateFormat: "",
                    writeAllFields: true,
                    writeRecordId: true
                }
            },
        });
    </script>
}
