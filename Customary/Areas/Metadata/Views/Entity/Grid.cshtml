@model Custom.Presentation.Sencha.Ext.grid.Panel
@using Custom.Areas.Metadata.Models
@using Custom.Metadata
@using Custom.Presentation
@using Ext = Custom.Presentation.Sencha.Ext
<script type="text/javascript">
    Ext.define('App.metadata.entity.Grid', function () {

        var columns = [
            {
                /*editor: {
                    // defaults to textfield if no xtype is supplied
                    allowBlank: true
                },*/
                sortable: false,
                width: 50,
                xtype: "rownumberer",
            },
            {
                editor: {
                    allowBlank: true
                    //vtype: 'email'
                },
                dataIndex: "name",
                fixed: false,
                flex: 1,
                text: "Name",
                width: 80
            },
            {
                editor: {
                    allowBlank: true
                },
                dataIndex: "namespace",
                fixed: false,
                flex: 1,
                text: "Namespace",
                width: 120
            },
            {
                editor: {
                    allowBlank: true
                },
                dataIndex: "title",
                fixed: false,
                flex: 1,
                text: "Title",
                width: 120
            },
            {
                editor: {
                    allowBlank: true
                },
                dataIndex: "summary",
                fixed: false,
                flex: 3,
                text: "Summary",
                width: 120
            }
        ];

        var writer = Ext.create('Ext.data.writer.Json', {
            root: 'data',
            allowSingle: false, // force data to be array
            //dateFormat: "",
            writeAllFields: false,
            writeRecordId: true,
            getRecordData: function (record) {
                return {
                    'id': record.data.id,
                    'name': record.data.name,
                    'namespace': record.data.namespace,
                    'title': record.data.title,
                    'summary': record.data.summary,
                    'culture': record.data.culture
                };
            }
        });

        var proxy = {
            // Use for ajax proxy, since all the create, update and detroy requests will be all POST
            // and for jsonp the api is the same, but the method is GET
            type: 'ajax', // rest, jsonp or ajax. 
            api: {
                create: '@Url.Absolute("/Metadata/Entity/Create")',
                read: '@Url.Absolute("/Metadata/Entity/Read")',
                update: '@Url.Absolute("/Metadata/Entity/Update")',
                destroy: '@Url.Absolute("/Metadata/Entity/Destroy")'
            },
            //url: path,
            autoLoad: true,
            headers: {
                "Accept": "application/json"
            },
            listeners: {
                exception: function (proxy, response, operation) {
                    Ext.MessageBox.show({
                        title: 'REMOTE EXCEPTION',
                        msg: operation.getError(),
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.Msg.OK
                    });
                }
            },
            reader: {
                type: "json",
                root: "data",
                //dateFormat: "",
                totalProperty: 'total',
                successProperty: 'success',
                messageProperty: 'message'
            },
            writer: {
                type: 'json',
                root: 'data',
                allowSingle: false, // force data to be array
                //dateFormat: "",
                writeAllFields: false,
                writeRecordId: true
            }
        };

        return {
            extend: 'Ext.grid.Panel',
            //alias: 'widget.entityGrid',
            requires: [
                'Ext.form.field.Text',
                'Ext.toolbar.TextItem',
                'App.metadata.entity.Model'
            ],

            columns: {
                items: columns
            },
            
            /**
             * Called by Ext when instantiating
             * param {Object} config Configuration object
             */
            initComponent: function (config) {

                var scope = this.initialConfig.scope || this;

                this.editing = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2,
                    clicksToMoveEditor: 1,
                    autoCancel: true
                });

                var convertText = function (text) {
                    switch (typeof text) {
                        case 'string':
                            return text;

                        case 'object':
                            return text.en;

                        default:
                            return text;
                    }
                };

                Ext.define('App.metadata.entity.grid.store.Model', {
                    extend: 'Ext.data.Model',
                    fields: [
                        { name: 'id' },
                        { name: 'name' },
                        { name: 'namespace' },
                        { name: 'title', convert: convertText },
                        { name: 'summary', convert: convertText }
                    ]
                });

                var store = new Ext.data.Store({
                    // destroy the store if the grid is destroyed
                    autoDestroy: true,
                    autoLoad: true,
                    //autoSave: true,
                    autoSync: false,
                    batchActions: true,
                    //buffered: true,
                    model: 'App.metadata.entity.grid.store.Model',
                    proxy: proxy,
                    pageSize: 100,
                    listeners: {
                        write: function (proxy, operation) {
                            if (operation.action == 'destroy') {
                                //main.child('#form').setActiveRecord(null);
                            }
                            //Ext.example.msg(operation.action, operation.resultSet.message);
                        }
                    },
                    sorters: [{
                        property: 'name',
                        direction: 'ASC'
                    }]
                });

                Ext.apply(this,
                    {
                        iconCls: 'icon-grid',
                        layout: 'fit',
                        //frame: true,
                        //items: [this.edit],
                        plugins: [this.editing],
                        store: store,
                        
                        selModel: Ext.create("Ext.selection.RowModel",
                            {
                                selType: "rowmodel",
                                listeners: {
                                    selectionchange: {
                                        fn: function (selModel, selections) {
                                            this.onSelectionChange(selModel, selections)
                                        },
                                        scope: this
                                    }
                                }
                            })
                    });

                this.callParent();

                //this.getSelectionModel().on('selectionchange', this.onSelectionChange, this);
            },

            onSelectionChange: function (selModel, selections) {
                //this.down('#delete').setDisabled(selections.length === 0);
                //var form = this.form.getForm();
                //form.reset();
                //this.form.setActiveRecord(selections[0]);
            }
        };
    });
</script>
