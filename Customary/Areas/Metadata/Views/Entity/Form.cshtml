@model Custom.Presentation.Sencha.Ext.form.Panel
@using Custom.Areas.Metadata.Models
@using Custom.Metadata
@using Custom.Presentation
@using Ext = Custom.Presentation.Sencha.Ext
<script type="text/javascript">
    Ext.define('App.metadata.entity.Form', function () {

        // The data store containing the list of states
        var states = Ext.create('Ext.data.Store', {
            fields: ['value', 'display'],
            data: [
                { "value": 1, "display": "New" },
                { "value": 2, "display": "Typo" },
                { "value": 3, "display": "Minor" },
                { "value": 4, "display": "Mayor" },
                { "value": 5, "display": "Revision" }
                //...
            ]
        });

        var fields = [
            {
                xtype: 'fieldset',
                columnWidth: 0.5,
                border: false,
                collapsible: false,
                defaultType: 'textfield',
                defaults: { anchor: '100%' },
                layout: 'anchor',
                items: [
                    {
                        allowBlank: false,
                        fieldLabel: "Name",
                        name: "name"
                    },
                    {
                        allowBlank: false,
                        fieldLabel: "Title",
                        name: "titleText"
                    }
                ]
            },
            {
                xtype: 'fieldset',
                columnWidth: 0.5,
                border: false,
                collapsible: false,
                defaultType: 'textfield',
                layout: 'anchor',
                items: [
                    {
                        allowBlank: false,
                        fieldLabel: "Namespace",
                        name: "namespace"
                    },
                    {
                        cls: 'x-item-disabled', // simulate disabled; submitted
                        fieldLabel: "Version",
                        name: "version",
                        readOnly: true,
                    }
                ]
            },
            {
                xtype: 'fieldset',
                columnWidth: 1,
                border: false,
                collapsible: false,
                defaultType: 'textfield',
                defaults: { anchor: '100%' },
                layout: 'anchor',
                items: [
                    {
                        fieldLabel: "Summary",
                        name: "summaryText",
                        xtype: "textarea",
                    }
                ]
            },
            {
                xtype: 'panel',
                layout: 'column',
                title: 'Change status',
                columnWidth: 1,
                frame: true,
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 0.5,
                        border: false,
                        collapsible: false,
                        defaultType: 'textfield',
                        defaults: { anchor: '100%' },
                        layout: 'anchor',
                        items: [
                            {
                                cls: 'x-item-disabled', // simulate disabled; submitted
                                fieldLabel: "Who",
                                format: "n/j/Y",
                                name: "modifiedBy",
                                readOnly: true,
                                xtype: "datefield",
                            },
                            {
                                //cls: 'x-item-disabled', // simulate disabled; submitted
                                fieldLabel: "Why",
                                name: "modifiedFor",
                                //readOnly: true,
                                xtype: "combobox",
                                store: states,
                                queryMode: 'local',
                                displayField: 'display',
                                valueField: 'value',
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        columnWidth: 0.5,
                        border: false,
                        collapsible: false,
                        defaultType: 'textfield',
                        layout: 'anchor',
                        items: [
                            {
                                cls: 'x-item-disabled', // simulate disabled; submitted
                                fieldLabel: "When",
                                format: "n/j/Y",
                                name: "modifiedOn",
                                readOnly: true,
                                xtype: "datefield",
                            },
                            {
                                cls: 'x-item-disabled', // simulate disabled; submitted
                                fieldLabel: "Where",
                                name: "modifiedAt",
                                readOnly: true,
                                xtype: "textfield",
                            }
                        ]
                    },
                ]
            }
        ];

        return {
            extend: 'Ext.form.Panel',
            //alias: 'widget.writerform',

            requires: [
                'Ext.form.field.Text',
                'App.core.Adapter',
                'App.metadata.entity.Model'
            ],

            initComponent: function () {

                this.updateButton = Ext.create('Ext.Button', {
                    iconCls: 'icon-save',
                    text: 'Save',
                    disabled: true,
                    scope: this,
                    handler: this.onUpdate
                });

                this.cancelButton = Ext.create('Ext.Button', {
                    iconCls: 'icon-reset',
                    text: 'Cancel',
                    scope: this,
                    handler: this.onCancel
                });

                Ext.apply(this, {
                    frame: true,
                    //bodyStyle: 'padding:5px 5px 0',
                    layout: 'column',
                    defaults: {
                        bodyPadding: 4
                    },
                    items: fields,
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            items: ['->', this.updateButton, this.cancelButton]
                        }
                    ]
                });

                this.callParent();

                App.core.Adapter.subscribe('App.metadata.entity.Grid.init', {
                    fn: function (grid) {
                        //grid.getSelectionModel().on('selectionchange', this.onSelectionChange, this);
                    },
                    scope: this
                });

                App.core.Adapter.subscribe('App.metadata.entity.Grid.selectionchange', {
                    fn: this.onSelectionChange,
                    scope: this
                });

                App.core.Adapter.publish('App.metadata.entity.Form.init', this);
            },

            onUpdate: function () {
                var form = this.getForm();

                /*if (form.isValid()) {
                    this.fireEvent('create', this, form.getValues());
                    form.reset();
                }*/
            },

            onCancel: function () {
                this.getForm().reset();
                this.getForm().loadRecord(this.activeRecord);
            },

            onSelectionChange: function (selModel, selections) {
                if (typeof selections === 'object' && selections.length === 1) {
                    this.setRecord(selections[0]);
                } else {
                    this.setRecord(null);
                }
            },

            setRecord: function (record) {

                var form = this.getForm();

                if (form.isDirty() && form.isValid() && !!this.record) {
                    form.updateRecord(this.record);
                }

                this.record = null;

                form.reset();

                if (typeof record === 'object') {
                    this.record = record;
                    form.loadRecord(this.record);
                    this.updateButton.enable();
                } else {
                    this.updateButton.disable();
                }
            },
        }
    });
</script>
