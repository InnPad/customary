@model Custom.Presentation.Sencha.Ext.grid.Panel
@using Custom.Areas.Metadata.Models
@using Custom.Metadata
@using Custom.Presentation
@using Ext = Custom.Presentation.Sencha.Ext
<script type="text/javascript">
    Ext.define('App.metadata.property.Grid', function () {

        return {
            extend: 'Ext.grid.Panel',
            requires: [
                'Ext.form.field.Text',
                'Ext.grid.plugin.RowEditing',
                'Ext.toolbar.TextItem'
            ],

            /**
             * Called by Ext when instantiating
             * param {Object} config Configuration object
             */
            initComponent: function (config) {

                var columns = [
                    {
                        editor: {
                            allowBlank: false
                            //vtype: 'email'
                        },
                        dataIndex: "name",
                        fixed: false,
                        flex: 1,
                        text: "Name"
                    },
                    {
                        editor: {
                            allowBlank: false
                            //vtype: 'email'
                        },
                        dataIndex: 'propertyType',
                        fixed: false,
                        flex: 1,
                        text: "Type",
                    },
                    {
                        editor: {
                            allowBlank: true
                        },
                        dataIndex: "titleText",
                        fixed: false,
                        flex: 1,
                        text: "Title"
                    },
                    {
                        editor: {
                            allowBlank: true
                        },
                        dataIndex: "summaryText",
                        fixed: false,
                        flex: 3,
                        text: "Summary"
                    }
                ];

                this.editing = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2,
                    clicksToMoveEditor: 1,
                    autoCancel: true
                });

                Ext.apply(this,
                    {
                        iconCls: 'icon-grid',
                        layout: 'fit',
                        //frame: true,
                        columns: columns,
                        plugins: [this.editing],
                        selModel: Ext.create("Ext.selection.RowModel", {
                                selType: "rowmodel",
                                listeners: {
                                    selectionchange: {
                                        fn: function (selModel, selections) {
                                            this.onSelectionChange(selModel, selections)
                                        },
                                        scope: this
                                    }
                                }
                            })
                    });

                this.callParent();
                //this.getSelectionModel().on('selectionchange', this.onSelectionChange, this);

                App.core.Adapter.subscribe('App.metadata.entity.Grid.selectionchange', {
                    fn: function (selModel, selections) {
                        if (typeof selections === 'object' && selections.length === 1) {
                            this.setSource(selections[0]);
                        } else {
                            this.setSource(null);
                        }
                    },
                    scope: this
                });
            },

            setSource: function (record) {
                if (typeof (record.members) === 'function') {
                    this.reconfigure(record.members());
                }
            },

            // Add button was clicked on the grid toolbar.
            onAddClick: function () {
                this.editing.cancelEdit();

                // Create a model instance
                var r = new this.model/* Ext.create('Employee', {
                name: 'New Guy',
                email: 'new@sencha-test.com',
                start: Ext.Date.clearTime(new Date()),
                salary: 50000,
                active: true
            })*/;

                this.store.insert(0, r);
                this.editing.startEdit(0, 0);
            },

            // Delete button was clicked.
            onDeleteClick: function () {
                this.editing.cancelEdit();

                var view = this.getView();
                var sm = view.getSelectionModel();
                var selection = sm.getSelection();

                var index;
                for (var i = 0; i < selection.length; i++) {
                    var record = selection[i];
                    index = Math.min(index || record.index, record.index);
                    this.store.remove(selection[i]);
                }

                var count = this.store.getCount();
                if (!!index && count > 0) {
                    sm.select(Math.min(index, count - 1));
                }
            },

            // Reset button was clicked.
            onResetClick: function () {
                this.form.loadRecord(this.selected[0]);
            },

            onSelectionChange: function (selModel, selections) {
                //this.down('#delete').setDisabled(selections.length === 0);
                App.core.Adapter.publish('App.metadata.property.Grid.selectionchange', selModel, selections);
            }
        };
    });
</script>
