@model Custom.Site.Presentation.Sencha.Ext.form.Panel
@using Custom.Areas.Metadata.Models
@using Custom.Data.Metadata
@using Custom.Site.Presentation
@using Ext = Custom.Site.Presentation.Sencha.Ext
<script type="text/javascript">
    Ext.define('App.metadata.property.Form', function () {

        return {
            extend: 'Ext.form.Panel',
            //alias: 'widget.propertyform',

            requires: ['Ext.form.field.Text'],

            initComponent: function () {

                Ext.apply(this,
                    {
                        frame: true,
                        //bodyStyle: 'padding:5px 5px 0',
                        layout: 'column',
                        fieldDefaults: {
                            anchor: '100%',
                            labelAlign: 'right'
                        },
                        items: [
                            {
                                xtype: 'fieldset',
                                columnWidth: 0.5,
                                border: false,
                                bodyPadding: 0,
                                collapsible: false,
                                defaultType: 'textfield',
                                defaults: { anchor: '100%' },
                                layout: 'anchor',
                                items: [
                                    {
                                        allowBlank: false,
                                        fieldLabel: "Name",
                                        name: "name"
                                    },
                                    Ext.create('App.metadata.type.Field', {
                                        fieldLabel: "Type",
                                        name: "propertyType"
                                    }),
                                    {
                                        allowBlank: false,
                                        fieldLabel: "Title",
                                        name: "titleText"
                                    }
                                ]
                            },
                            {
                                xtype: 'fieldset',
                                columnWidth: 0.5,
                                border: false,
                                collapsible: false,
                                defaults: { anchor: '100%' },
                                layout: 'anchor',
                                vertical: true,
                                items: [
                                    {
                                        xtype: 'checkbox',
                                        boxLabel: "Required",
                                        name: "required"
                                    },
                                    {
                                        xtype: 'checkbox',
                                        boxLabel: "Multiple",
                                        name: "multiple"
                                    },
                                    {
                                        xtype: 'checkbox',
                                        boxLabel: "Reference",
                                        name: "reference"
                                    }
                                ]
                            },
                            {
                                xtype: 'fieldset',
                                columnWidth: 1,
                                border: false,
                                defaults: { anchor: '100%' },
                                layout: 'anchor',
                                items: [
                                    {
                                        fieldLabel: "Summary",
                                        name: "summaryText",
                                        xtype: "textarea"
                                    }
                                ]
                            }
                            ]
                        });

                this.callParent();

                App.core.Adapter.subscribe('App.metadata.property.Grid.init', {
                    fn: function (grid) {
                        //grid.getSelectionModel().on('selectionchange', this.onSelectionChange, this);
                    },
                    scope: this
                });

                App.core.Adapter.subscribe('App.metadata.property.Grid.selectionchange', {
                    fn: this.onSelectionChange,
                    scope: this
                });

                App.core.Adapter.subscribe('App.metadata.entity.Panel.commit', {
                    fn: this.onCommit,
                    scope: this
                });

                App.core.Adapter.subscribe('App.metadata.entity.Panel.rollback', {
                    fn: this.onRollback,
                    scope: this
                });

                App.core.Adapter.publish('App.metadata.property.Form.init', this);
            },

            onCommit: function () {
                var form = this.getForm();

                if (form.isDirty() && form.isValid() && !!this.record) {
                    form.updateRecord(this.record);
                }
            },

            onRollback: function () {
                this.getForm().reset();
                this.getForm().loadRecord(this.record);
            },

            onSelectionChange: function (selModel, selections) {
                if (typeof selections === 'object' && selections.length === 1) {
                    this.setRecord(selections[0]);
                } else {
                    this.setRecord(null);
                }
            },

            setRecord: function (record) {

                var form = this.getForm();

                if (form.isDirty() && form.isValid() && !!this.record) {
                    form.updateRecord(this.record);
                }

                this.record = null;

                form.reset();

                if (typeof record === 'object') {
                    this.record = record;
                    form.loadRecord(this.record);
                }
            },
        }
    });
</script>
