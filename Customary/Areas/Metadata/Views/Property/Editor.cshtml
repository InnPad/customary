@using Custom.Areas.Metadata.Models
@using Custom.Metadata
@using Custom.Presentation
@using Ext = Custom.Presentation.Sencha.Ext
<script type="text/javascript">
    Ext.define('App.metadata.property.Editor', function () {

        return {
            extend: 'Ext.panel.Panel',
            alias: 'widget.associationPanel',
            requires: [
                'Ext.form.field.Text',
                'Ext.grid.plugin.RowEditing',
                'Ext.toolbar.TextItem',
                'App.metadata.member.TitleField',
                'App.metadata.member.SummaryField'
            ],
            store: null,
            parent: null,
            record: null,
            initComponent: function (config) {

                this.formPanel = Ext.create('Ext.form.Panel', {
                    title: "Edit",
                    disabled: true,
                    trackResetOnLoad: true,
                    collapsed: true,
                    header: false,
                    frame: true,
                    border: false,
                    region: 'north',
                    collapsible: true,
                    split: true,
                    frame: true,
                    //bodyStyle: 'padding:5px 5px 0',
                    layout: 'column',
                    fieldDefaults: {
                        anchor: '100%',
                        labelAlign: 'right'
                    },
                    bodyPadding: 0,
                    items: [
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.5,
                            border: false,
                            bodyPadding: 0,
                            collapsible: false,
                            defaultType: 'textfield',
                            defaults: { anchor: '100%' },
                            layout: 'anchor',
                            items: [
                                {
                                    allowBlank: false,
                                    fieldLabel: "Name",
                                    name: "name"
                                },
                                Ext.create('App.metadata.type.Field', {
                                    fieldLabel: "Type",
                                    name: "propertyType"
                                }),
                                {
                                    allowBlank: false,
                                    fieldLabel: "Title",
                                    name: "titleText"
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 0.5,
                            border: false,
                            collapsible: false,
                            defaults: { anchor: '100%' },
                            layout: 'anchor',
                            vertical: true,
                            items: [
                                {
                                    xtype: 'checkbox',
                                    boxLabel: "Required",
                                    name: "required"
                                },
                                {
                                    xtype: 'checkbox',
                                    boxLabel: "Multiple",
                                    name: "multiple"
                                },
                                {
                                    xtype: 'checkbox',
                                    boxLabel: "Reference",
                                    name: "reference"
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            columnWidth: 1,
                            border: false,
                            defaults: { anchor: '100%' },
                            layout: 'anchor',
                            items: [
                                {
                                    fieldLabel: "Summary",
                                    name: "summaryText",
                                    xtype: "textarea"
                                }
                            ]
                        }
                    ],
                    listeners: {
                        dirtychange: {
                            fn: this.onDirtyChange,
                            scope: this
                        }
                    }
                });

                this.editing = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2,
                    clicksToMoveEditor: 1,
                    autoCancel: true
                });

                this.gridPanel = Ext.create('Ext.grid.Panel', {
                    header: false,
                    region: 'center',
                    split: true,
                    disabled: true,
                    iconCls: 'icon-grid',
                    layout: 'fit',
                    plugins: [this.editing],
                    columns: [
                        {
                            editor: {
                                allowBlank: false
                                //vtype: 'email'
                            },
                            dataIndex: "Name",
                            fixed: false,
                            flex: 1,
                            text: "Name"
                        },
                        {
                            editor: {
                                allowBlank: false
                                //vtype: 'email'
                            },
                            dataIndex: 'PropertyType',
                            fixed: false,
                            flex: 1,
                            text: "Type",
                        },
                        {
                            editor: {
                                allowBlank: true
                            },
                            dataIndex: "titleText",
                            fixed: false,
                            flex: 1,
                            text: "Title"
                        },
                        {
                            editor: {
                                allowBlank: true
                            },
                            dataIndex: "summaryText",
                            fixed: false,
                            flex: 3,
                            text: "Summary"
                        }
                    ],
                    selModel: Ext.create("Ext.selection.RowModel", {
                        selType: "rowmodel",
                        listeners: {
                            selectionchange: {
                                fn: function (selModel, selections) {
                                    if (typeof selections === 'object' && selections.length === 1) {
                                        this.load(selections[0]);
                                    } else {
                                        this.reset();
                                    }

                                    App.core.Adapter.publish('App.metadata.Property.selectionchange', selModel, selections);
                                },
                                scope: this
                            }
                        }
                    })/*,
                    listeners: {
                        reconfigure: {
                            fn: function (grid, store, columns, oldStore, The, eOpts) {
                                this.reset();
                                try {
                                    if (typeof store === 'object' && store.getCount() > 0) {
                                        //this.gridPanel.getSelectionModel().deselectAll();
                                        //this.gridPanel.getSelectionModel().select(0, true);
                                    }
                                }
                                catch (e) {
                                    if (console && console.error) {
                                        console.error(e.message);
                                    }
                                }
                            },
                            scope: this
                        }
                    }*/
                });

                this.addButton = Ext.create('Ext.Button', {
                    iconCls: 'icon-add',
                    text: 'Add',
                    disabled: true,
                    scope: this,
                    handler: this.onAddClick
                });

                this.cancelButton = Ext.create('Ext.Button', {
                    iconCls: 'icon-cancel',
                    text: 'Cancel',
                    disabled: true,
                    scope: this,
                    handler: this.onCancelClick
                });

                this.deleteButton = Ext.create('Ext.Button', {
                    iconCls: 'icon-delete',
                    text: 'Delete',
                    disabled: true,
                    scope: this,
                    handler: this.onDeleteClick
                });

                this.updateButton = Ext.create('Ext.Button', {
                    iconCls: 'icon-update',
                    text: 'Update',
                    disabled: true,
                    scope: this,
                    handler: this.update
                });

                Ext.apply(this, {
                    items: [
                        this.formPanel,
                        this.gridPanel,
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            items: [this.addButton, this.deleteButton, '->', this.updateButton, this.cancelButton]
                        }
                    ]
                });

                this.callParent();

                App.core.Adapter.subscribe('App.metadata.Entity.commit', {
                    fn: function () {
                        this.store.commitChanges();
                        this.reload();
                    },
                    scope: this
                });

                App.core.Adapter.subscribe('App.metadata.Entity.rollback', {
                    fn: function () {
                        this.store.rejectChanges();
                        var record = this.record;
                        this.reset();
                        this.record = record;
                        this.load(record);
                    },
                    scope: this
                });

                App.core.Adapter.subscribe('App.metadata.Entity.selectionchange', {
                    fn: function (selModel, selections) {
                        if (typeof selections === 'object' && selections.length === 1) {
                            this.reconfigure(selections[0]);
                        } else {
                            //this.reconfigure();
                        }
                        this.reset();
                    },
                    scope: this
                });

                App.core.Adapter.publish('App.metadata.Property.init', this);
            },
            load: function (record) {
                this.record = record;

                this.formPanel.enable();
                this.updateButton.disable();
                this.cancelButton.disable();

                var forms = [
                    this.formPanel.getForm()
                ];

                Ext.each(forms, function (form) {
                    form.loadRecord(record);
                });

                this.formPanel.enable();
            },
            onAddClick: function () {
                // Add button was clicked on the grid toolbar.
                this.editing.cancelEdit();

                // Create a model instance
                var r = new this.model/* Ext.create('Employee', {
                name: 'New Guy',
                email: 'new@sencha-test.com',
                start: Ext.Date.clearTime(new Date()),
                salary: 50000,
                active: true
            })*/;

                this.store.insert(0, r);
                this.editing.startEdit(0, 0);
            },
            onCancelClick: function () {
                // Cancel button was clicked.
                this.form.loadRecord(this.selected[0]);
            },
            onDeleteClick: function () {
                // Delete button was clicked.
                this.editing.cancelEdit();

                var view = this.getView();
                var sm = view.getSelectionModel();
                var selection = sm.getSelection();

                var index;
                for (var i = 0; i < selection.length; i++) {
                    var record = selection[i];
                    index = Math.min(index || record.index, record.index);
                    this.store.remove(selection[i]);
                }

                var count = this.store.getCount();
                if (!!index && count > 0) {
                    sm.select(Math.min(index, count - 1));
                }
            },
            onDataChanged: function (store, eOpts) {
                if (typeof this.parent === 'object' && typeof this.parent.store === 'object') {
                    this.parent.store.fireEvent('datachanged', this.parent.store);
                }
                App.core.Adapter.publish('App.metadata.Property.datachanged', this.store);
                App.core.Adapter.publish('App.metadata.Entity.datachanged', this.parent.store);
            },
            onDeleteClick: function () {
            },
            onDirtyChange: function (form, dirty) {
                if (dirty === true) {
                    this.updateButton.enable();
                    this.cancelButton.enable();
                }
            },
            onPropertyAdd: function (store, records, index, eOpts) {
                // Called when a Model instance has been added to this Store.
                if (this.parent != null && typeof this.parent === 'object' && typeof this.parent.store === 'object') {
                    this.parent.store.fireEvent('datachanged', this.parent.store);
                }
            },
            onPropertyRemove: function (store, record, index, isMove, eOpts) {
                // Called when a Model instance has been removed from this Store.
                if (this.parent != null && typeof this.parent === 'object' && typeof this.parent.store === 'object') {
                    this.parent.store.fireEvent('datachanged', this.parent.store);
                }
            },
            onPropertyUpdate: function (store, record, operation, modifiedFieldNames, eOpts) {
                // Called when a Model instance has been updated.
                if (this.parent != null && typeof this.parent === 'object' && typeof this.parent.store === 'object') {
                    this.parent.store.fireEvent('datachanged', this.parent.store);
                }
            },
            onUpdateClick: function () {
                this.updateRecord();
            },
            reconfigure: function (record) {
                if (this.store != null && typeof this.store === 'object') {
                    this.store.removeListener('datachanged', this.onDataChanged, this);
                    this.store.removeListener('add', this.onPropertyAdd, this);
                    this.store.removeListener('remove', this.onPropertyRemove, this);
                    this.store.removeListener('update', this.onPropertyUpdate, this);
                    this.parent = null;
                    this.store = null;
                }

                this.gridPanel.getSelectionModel().clearSelections(); // a must or you get an exception

                if (record != null && typeof record == 'object' && typeof record.store === 'object' && typeof (record.Properties) === 'function') {
                    this.parent = record;
                    this.store = record.Properties();
                    this.store.on('datachanged', this.onDataChanged, this);
                    this.store.on('add', this.onPropertyAdd, this);
                    this.store.on('remove', this.onPropertyRemove, this);
                    this.store.on('update', this.onPropertyUpdate, this);
                    this.gridPanel.reconfigure(record.Properties());
                    this.gridPanel.enable();
                } else {
                    this.gridPanel.disable();
                    this.gridPanel.reconfigure();
                }
            },
            reload: function () {
                if (this.record != null && typeof this.record === 'object') {
                    this.load(this.record);
                } else {
                    this.reset();
                }
            },
            reset: function () {
                this.record = null;

                this.formPanel.disable();
                this.updateButton.disable();
                this.cancelButton.disable();

                var forms = [
                    this.formPanel.getForm()
                ];

                Ext.each(forms, function (form) {
                    delete form._record;

                    form.reset();
                    form.checkDirty();

                    Ext.batchLayouts(function () {
                        form.getFields().each(function (c) {
                            c.value = '';
                            if (c.mixins && c.mixins.field && typeof c.mixins.field['initValue'] == 'function') {
                                c.mixins.field.initValue.apply(c);
                                c.wasDirty = false;
                            }
                            c.reset();
                        });
                    });
                });
            },
            update: function () {
                this.updateButton.disable();
                this.cancelButton.disable();

                var forms = [
                    this.formPanel.getForm()
                ];

                var record = this.record;

                Ext.each(forms, function (form) {
                    if (form.isDirty() && form.isValid()) {
                        form.updateRecord();
                        form.loadRecord(record);
                    }
                });
            },
        };
    });
</script>
