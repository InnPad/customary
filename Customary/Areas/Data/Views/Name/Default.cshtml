@using Custom.Areas.Metadata.Models
@using Custom.Data.Metadata
@{
    Layout = "~/Areas/Data/Views/Shared/_Layout.cshtml";
}

<style>
    .x-tab-bar-default-top {
        background-color: #dfe8f5;
        background-image: none; /*-webkit-linear-gradient(top,#dde8f5,#cbdbef);*/
    }
</style>

<script type="text/javascript">
    Ext.Loader.setPath('Ext', '@Url.Absolute("/Scripts/Ext")');
</script>

<script type="text/javascript">
    var frameStyle = 'background-color:#dfe8f5;';
</script>

<script type="text/javascript">
    Ext.define('Customary.view.Directory', {
        extend: 'Ext.custom.data.Directory'
    });
</script>

<script type="text/javascript">
    Ext.define('Customary.view.Drop', {
        extend: 'Ext.custom.Droplet'
    });
</script>

<script type="text/javascript">
    Ext.define('Customary.controller.Drops', {
        extend: 'Ext.app.Controller',
        //views: ['posts.List', 'posts.Edit'],

        //the rest of the Controller here

        init: function () {
            this.control({
                'viewport > panel': {
                    render: this.onPanelRendered
                }
            });
        },

        onPanelRendered: function () {
            console.log('The panel was rendered');
        }
    });
</script>

<script type="text/javascript">
    Ext.define('Custom.app.Application', function () {

        var guidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;

        return {
            name: 'Customary',
            extend: 'Ext.app.Application',
            requires: [
                'Ext.container.Viewport',
            ],
            uses: [
                'Ext.custom.Adapter',
                'Ext.custom.Droplet',
                'Ext.custom.Factory'
            ],
            culture: 'en',
            dirty: false,
            appFolder: '/Scripts/Ext/custom',
            appProperty: 'current',
            //models: ['Post', 'Comment'],
            controllers: ['Drops'/*, 'Comments'*/],
            launch: function () {

                // Apply a set of config properties to the singleton
                Ext.apply(Ext.tip.QuickTipManager.getQuickTip(), {
                    //maxWidth: 600,
                    //minWidth: 300,
                    //mouseOffset: [50, 50],
                    //showDelay: 50      // Show 50ms after entering target
                });

                var directory = Ext.create('Ext.custom.data.Directory');

                this.centerPanel = Ext.create('Ext.panel.Panel', {
                    region: 'center',
                    bodyStyle: frameStyle, // background color like frame
                    header: false,
                    items: [],
                    flex: 5,
                    border: false,
                    layout: 'fit',
                    title: 'Select Entity'
                });

                var statusBar = Ext.create('Ext.ux.StatusBar', {
                    id: 'basic-statusbar',
                    region: 'south',
                    // defaults to use when the status is cleared:
                    defaultText: 'Default status text',
                    //defaultIconCls: 'default-icon',

                    // values to set initially:
                    text: 'Ready',
                    iconCls: 'x-status-valid',

                    // any standard Toolbar items:
                    items: [
                        {
                            xtype: 'button',
                            text: 'Show Warning & Clear',
                            handler: function () {
                                var sb = Ext.getCmp('basic-statusbar');
                                sb.setStatus({
                                    text: 'Oops!',
                                    iconCls: 'x-status-error',
                                    clear: true // auto-clear after a set interval
                                });
                            }
                        },
                        {
                            xtype: 'button',
                            text: 'Show Busy',
                            handler: function () {
                                var sb = Ext.getCmp('basic-statusbar');
                                // Set the status bar to show that something is processing:
                                sb.showBusy();
                            }
                        },
                        {
                            xtype: 'button',
                            text: 'Clear status',
                            handler: function () {
                                var sb = Ext.getCmp('basic-statusbar');
                                // once completed
                                sb.clearStatus();
                            }
                        },
                        '-',
                        'Plain Text'
                    ]
                });

                Ext.create('Ext.container.Viewport', {
                    layout: 'border',
                    bodyStyle: frameStyle, // background color like frame
                    items: [
                        {
                            region: 'north',
                            xtype: 'container',
                            bodyStyle: frameStyle, // background color like frame
                            html: '@Html.Partial("~/Areas/Data/Views/Name/Header.cshtml")',
                            autoHeight: true,
                            border: false,
                            margins: '0 0 5 0'
                        },
                        directory.initComponent({
                            activeTab: 0,
                            region: 'west',
                            bodyStyle: frameStyle, // background color like frame
                            bodyBorder: false,
                            border: false,
                            collapsible: true,
                            flex: 1,
                            header: false,
                            layout: 'fit',
                            listeners: {
                                select: {
                                    fn: function (directory, record, selModel, selections) {
                                        if (record !== null && typeof record === 'object') {

                                            var typeName;

                                            switch (record.type) {

                                                case 'area':
                                                    typeName = 'Metadata/Area';
                                                    break;

                                                case 'enum':
                                                    typeName = 'Metadata/Enum';
                                                    break;

                                                case 'model':
                                                    typeName = 'Metadata/Model';
                                                    break;

                                                case 'name':
                                                    //typeName = 'Metadata/Name';
                                                    break;

                                                case 'store':
                                                    typeName = 'Metadata/Store';
                                                    break;

                                                case 'unit':
                                                    typeName = 'Metadata/Unit';
                                                    break;

                                                case 'value':
                                                    typeName = 'Metadata/Value';
                                                    break;
                                            }

                                            if (typeof typeName !== 'string') {
                                                this.centerPanel.removeAll();
                                                this.centerPanel.doLayout();
                                            }
                                            else {

                                                Ext.custom.Droplet.asyncCreate(typeName, false, function (droplet) {

                                                    this.centerPanel.removeAll();
                                                    this.centerPanel.add(droplet.initComponent());
                                                    this.centerPanel.doLayout();

                                                    droplet.load(record.id);

                                                    //droplet.asyncLoad(record.id);
                                                }, this);
                                            }

                                        }
                                        else {

                                        }
                                    },
                                    scope: this
                                }
                                /*add: {
                                    fn: function (tabPanel, component, index, eOpts) {
                                        if (typeof tabPanel.title !== 'string') {
                                            tabPanel.setTitle(component.title);
                                        }
                                    },
                                    scope: this
                                },
                                tabchange: {
                                    fn: this.onViewTabChange,
                                    scope: this
                                }*/
                            },
                            margins: '0 0 0 5',
                            split: true
                        }),
                        this.centerPanel,
                        statusBar
                    ]
                });
                window.onbeforeunload = function () {
                    if (Customary.current.dirty) {
                        return "You have made changes on this page that you have not yet confirmed. If you navigate away from this page you will lose your unsaved changes";
                    }
                };

                if (Ext.supports.History) { // <- this prevents the firing off of the event
                    Ext.History.init()
                    Ext.History.on('change', this.onHistoryChange);
                    /*Ext.custom.Adapter.subscribe('Customary.view.Directory.selectionchange', function (path) {
                        Ext.History.add(path)
                    });
                    Ext.custom.Adapter.subscribe('Customary.view.Index.selectionchange', function (id) {
                        Ext.History.add(path + '/' + id)
                    });*/
                }
                else {
                    /*Ext.custom.Adapter.subscribe('Customary.view.Index.selectionchange', function (id) {
                        this.onHistoryChange();
                    });*/

                    this.onHistoryChange();
                }
            },

            onHistoryChange: function (id) {

                var token = Ext.History.getToken();

                var path = token.split('/');

                if (typeof token === 'string') {

                    if (guidRegex.test(token)) {
                        console.log('token accepted');
                        this.onHistoryChange(token);
                    }
                    else {
                        alert("Invalid token");
                        this.onHistoryChange();
                    }
                }
                else {
                }
            }
        }
    });
</script>

<script type="text/javascript">
    Ext.application('Custom.app.Application');
</script>
