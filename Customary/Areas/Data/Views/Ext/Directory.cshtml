<script type="text/javascript">
    // Create model, grid and forms for data definitions

    Ext.define('Ext.custom.data.Directory', function () {

        function makeModelName(typeName) {
            return 'Ext.custom.data.' + typeName.replace(new RegExp('/', 'g'), '.') + '.Model';
        }

        function fullName(node) {
            /// <param name="node" type="Ext.data.NodeInterface">
            /// </param>
            /// <returns type="String"></returns>
            var name = [];
            name.push(node.raw.text);
            for (node = node.parentNode; node; node = node.parentNode) {
                name.push(node.raw.text);
            }
            name = name.reverse().slice(1);
            return name.join('/');
        }

        function createIndexStore(directory) {

            return Ext.create('Ext.data.TreeStore', {
                id: 'Ext.custom.data.Directory.Store',
                autoLoad: true,
                //defaultRootId: '0',
                //defaultRootText: "text",
                //defaultRootProperty: 'children',
                folderSort: true,
                // not using model. direct proxy
                proxy: {
                    // Use for ajax proxy, since all the create, update and detroy requests will be all POST
                    // and for jsonp the api is the same, but the method is GET
                    type: 'ajax', // rest, jsonp or ajax.
                    buildUrl: function (request) {
                        switch (request.action) {
                            case 'read':
                                return directory.baseUrl + '/Data/Directory/' + fullName(request.operation.node);
                        }
                    },
                    headers: {
                        "Accept": "application/json"
                    },
                    listeners: {
                        exception: function (proxy, response, operation) {
                            Ext.MessageBox.show({
                                title: 'REMOTE EXCEPTION',
                                msg: operation.getError(),
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.Msg.OK
                            });
                        }
                    },
                    reader: {
                        type: "json",
                        root: "data",
                        totalProperty: 'total',
                        successProperty: 'success',
                        messageProperty: 'message'
                    }
                },
                root: {
                    text: "", // has to be empty
                    expanded: true,
                    loaded: false,
                }
            });
        }

        function createModelStore($m, model) {
        }

        // Get a nice decimal place precision for the scientific notation number.
        // e.g. 1.23e-7 yields 7+2 places after the decimal point
        // e.g. 4.5678e-11 yields 11+4 places after the decimal point
        function getPrecision(scinum) {
            var arr = new Array();
            // Get the exponent after 'e', make it absolute.  
            arr = scinum.split('e');
            var exponent = Math.abs(arr[1]);

            // Add to it the number of digits between the '.' and the 'e'
            // to give our required precision.
            var precision = new Number(exponent);
            arr = arr[0].split('.');
            precision += arr[1].length;

            return precision;
        }

        var s = "1.23e-7";
        // Handle exponential numbers.
        if (s.match(/^[-+]?[1-9]\.[0-9]+e[-]?[1-9][0-9]*$/)) {
            s = (+s).toFixed(getPrecision(s));
        }
        //returns 0.000000123

        function onCreateClick() {
            this._component.fireEvent('select', this);
        }

        function onDestroyClick() {
            this._component.fireEvent('select', this);
        }

        function onRefreshClick() {
            this.indexStore.load();
            //Ext.custom.Adapter.publish('Ext.custom.data.Directory.selectionchange', this.panel.selModel);

            this._component.fireEvent('select', this);
        }

        function onTabChange(tabPanel, newTab, oldTab, eOpts) {
            tabPanel.setTitle(newTab.title);

            this._component.fireEvent('select', this);
        }

        function onIndexSelectionChange(selModel, selections, opts) {
            if (typeof selections == 'object' && selections.length === 1 && typeof selections[0].raw == 'object') {
                this._indexRecord = Ext.Object.merge({}, selections[0].raw);

                var id = selections[0].raw.id;
                var type = selections[0].raw.type;
                var name = fullName(selections[0]);

                this._component.fireEvent('select', this, { name: name, type: type, id: id }, selModel, selections);
            } else {
                delete this._indexRecord;
                this._component.fireEvent('select', this);
            }
        }

        function onRecordSelectionChange(selModel, selections, opts) {
            if (typeof selections == 'object' && selections.length === 1 && typeof selections[0].raw == 'object') {
                this._component.fireEvent('select', this);
            }
            else {
                this._component.fireEvent('select', this);
            }
        }

        function onStoreSelectionChange(selModel, selections, opts) {
            if (typeof selections == 'object' && selections.length === 1 && typeof selections[0].raw == 'object') {
                this._component.fireEvent('select', this);
            } else {
                this._component.fireEvent('select', this);
            }
        }

        // copy from droplet
        function findToolItem(action, component, fn) {
            for (; typeof component === 'object' && component !== null; component = component.up()) {
                if (typeof component.getDockedItems === 'function') {
                    var toolbars = component.getDockedItems();
                    for (var i = 0; i < toolbars.length; i++) {
                        var toolbar = toolbars[i];
                        if (toolbar.xtype === 'toolbar') {
                            for (var j = 0; j < toolbar.items.length; j++) {
                                var item = toolbar.items.getAt(j);
                                if (typeof item == 'object' && item !== null && item.$action === action) {
                                    if (typeof fn === 'string' && typeof item[fn] === 'function') {
                                        var args = Array.prototype.slice.call(arguments, 3);
                                        item[fn].apply(item, args);
                                    }
                                    return item;
                                }
                            }
                        }
                    }
                }
            }
        }

        return {

            requires: [
                'Ext.custom.Adapter',
                'Ext.custom.Factory'
            ],

            statics: {

                /*createPanel: function (directory, config) {

                    Ext.Object.merge(directory, {
                        buttons: {
                            refresh: Ext.create('Ext.Button', {
                                iconCls: 'icon-refresh',
                                text: 'Refresh',
                                scope: directory,
                                handler: directory.onRefreshClick
                            })
                        }
                    });

                    return Ext.create('Ext.tree.Panel', Ext.Object.merge({
                        title: 'Index',
                        header: false,
                        store: directory.store,
                        rootVisible: false,
                        useArrows: true,
                        listeners: {
                            selectionchange: {
                                fn: directory.onIndexSelectionChange,
                                scope: directory
                            }
                        },
                        dockedItems: [
                            {
                                xtype: 'toolbar',
                                dock: 'bottom',
                                ui: 'footer',
                                margin: '6 0 3 0',
                                items: ['->', directory.buttons.refresh]
                            }
                        ]
                    }, config));
                },*/
            },

            constructor: function () {
                this.baseUrl = 'http://data.customary.com';
                this.indexStore = createIndexStore(this);
            },

            initComponent: function (customConfig) {

                this._component = Ext.widget(Ext.merge({
                    activeTab: 0,
                    bodyStyle: frameStyle, // background color like frame
                    bodyBorder: false,
                    border: false,
                    collapsible: true,
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    $action: 'create',
                                    disabled: false,
                                    handler: onCreateClick,
                                    hidden: true,
                                    iconCls: 'icon-new',
                                    scope: this,
                                    text: 'New',
                                    xtype: 'button'
                                },
                                {
                                    $action: 'destroy',
                                    disabled: true,
                                    handler: onDestroyClick,
                                    hidden: true,
                                    iconCls: 'icon-delete',
                                    scope: this,
                                    text: 'Delete',
                                    xtype: 'button'
                                },
                                '->',
                                {
                                    $action: 'refresh',
                                    handler: onRefreshClick,
                                    iconCls: 'icon-refresh',
                                    scope: this,
                                    text: 'Refresh',
                                    xtype: 'button'
                                }
                                //directory.buttons.refresh
                            ],
                            margin: '6 0 3 0',
                            ui: 'footer'
                        }
                    ],
                    flex: 1,
                    header: false,
                    items: [
                        {
                            header: false,
                            listeners: {
                                selectionchange: {
                                    fn: onIndexSelectionChange,
                                    scope: this
                                }
                            },
                            rootVisible: false,
                            store: this.indexStore,
                            title: 'Index',
                            useArrows: true,
                            xtype: 'treepanel'
                        },
                        {
                            header: false,
                            listeners: {
                                activate: {
                                    fn: function (component, eOpts) {
                                        var gridPanel = component.down('gridpanel');
                                        if (typeof gridPanel === 'object' && gridPanel != null) {
                                            findToolItem('create', component, 'show').setHandler(gridPanel.onAddClick, gridPanel);
                                            findToolItem('destroy', component, 'show').setHandler(gridPanel.onRemoveClick, gridPanel);
                                        }
                                        return true;
                                    },
                                    scope: this
                                },
                                beforedeactivate: {
                                    fn: function (component, eOpts) {
                                        findToolItem('create', component, 'hide').setHandler(Ext.emptyFn);
                                        findToolItem('destroy', component, 'hide').setHandler(Ext.emptyFn);
                                        return true;
                                    },
                                    scope: this
                                },
                                selectionchange: {
                                    fn: onRecordSelectionChange,
                                    scope: this
                                }
                            },
                            columns: {
                                items: []
                            },
                            title: 'Records',
                            xtype: 'gridpanel'
                        },
                        {
                            header: false,
                            listeners: {
                                selectionchange: {
                                    fn: onStoreSelectionChange,
                                    scope: this
                                }
                            },
                            columns: {
                                items: []
                            },
                            title: 'Stores',
                            xtype: 'gridpanel'
                        }
                    ],
                    layout: 'fit',
                    listeners: {
                        add: {
                            fn: function (tabPanel, component, index, eOpts) {
                                if (typeof tabPanel.title !== 'string') {
                                    tabPanel.setTitle(component.title);
                                }
                            },
                            scope: this
                        },
                        tabchange: {
                            fn: onTabChange,
                            scope: this
                        }
                    },
                    margins: '0 0 0 5',
                    split: true,
                    xtype: 'tabpanel'
                }, customConfig));

                return this._component;
            }
        };

    });
</script>
