<script type="text/javascript">
    // Create model, grid and forms for data definitions

    Ext.define('Ext.custom.data.Directory', function () {

        function makeModelName(typeName) {
            return 'Ext.custom.data.' + typeName.replace(new RegExp('/', 'g'), '.') + '.Model';
        }

        function name(node) {
            /// <param name="node" type="Ext.data.NodeInterface">
            /// </param>
            /// <returns type="String"></returns>
            var name = [];
            name.push(node.raw.text);
            for (node = node.parentNode; node; node = node.parentNode) {
                name.push(node.raw.text);
            }
            name = name.reverse().slice(1);
            return name.join('/');
        }

        // Get a nice decimal place precision for the scientific notation number.
        // e.g. 1.23e-7 yields 7+2 places after the decimal point
        // e.g. 4.5678e-11 yields 11+4 places after the decimal point
        function getPrecision(scinum) {
            var arr = new Array();
            // Get the exponent after 'e', make it absolute.  
            arr = scinum.split('e');
            var exponent = Math.abs(arr[1]);

            // Add to it the number of digits between the '.' and the 'e'
            // to give our required precision.
            var precision = new Number(exponent);
            arr = arr[0].split('.');
            precision += arr[1].length;

            return precision;
        }

        var s = "1.23e-7";
        // Handle exponential numbers.
        if (s.match(/^[-+]?[1-9]\.[0-9]+e[-]?[1-9][0-9]*$/)) {
            s = (+s).toFixed(getPrecision(s));
        }
        //returns 0.000000123

        return {

            requires: [
                'Ext.custom.Adapter',
                'Ext.custom.Factory'
            ],

            statics: {

                createModel: function (name, metadata) {

                    var extend = 'Ext.data.Model';

                    if (typeof metadata.extend === 'string') {
                        extend = makeModelName(metadata.extend);
                    }

                    var config = {
                        extend: extend,
                        fields: [],
                        validations: []
                    };

                    if (metadata.properties !== null && typeof metadata.properties === 'object' && typeof metadata.properties.length === 'int') {

                        var types = Ext.data.Types; // allow shorthand type access

                        for (var i = 0; i < metadata.properties.length; i++) {
                            var property = metadata.properties[i];
                            var field = { name: property.name };
                            if (typeof property.type !== 'undefined') {

                                switch (property.type) {

                                    case 'Boolean':
                                        field.type = types.BOOLEAN;
                                        break;

                                    case 'String':
                                        field.type = types.STRING;
                                        break;

                                    case 'Byte':
                                        field.type = types.INTEGER;
                                        config.validations.push({ type: 'length', field: field.name, min: 0, max: 255 });
                                        break;

                                    case 'Int16':
                                        field.type = types.INTEGER;
                                        config.validations.push({ type: 'length', field: field.name, min: -32768 , max: 32767 });
                                        break;

                                    case 'Int32':
                                        config.validations.push({ type: 'length', field: field.name, min: -2147483648, max: 2147483647 });
                                        field.type = types.INTEGER;
                                        break;

                                    case 'Int64':
                                        field.type = types.INTEGER;
                                        config.validations.push({ type: 'length', field: field.name, min: 0, max: 255 });
                                        break;

                                    case 'SByte':
                                        field.type = types.INTEGER;
                                        config.validations.push({ type: 'length', field: field.name, min: -127, max: 128 });
                                        break;

                                    case 'UInt16':
                                        field.type = types.INTEGER;
                                        config.validations.push({ type: 'length', field: field.name, min: 0, max: 65535 });
                                        break;

                                    case 'UInt32':
                                        field.type = types.INTEGER;
                                        config.validations.push({ type: 'length', field: field.name, min: 0, max: 4294967295 });
                                        break;

                                    case 'UInt64':
                                        field.type = types.INTEGER;
                                        config.validations.push({ type: 'length', field: field.name, min: 0, max: 18446744073709551615 });
                                        break;

                                    case 'Decimal':
                                        field.type = types.NUMBER;
                                        break;

                                    case 'Double':
                                        field.type = types.NUMBER;
                                        break;

                                    case 'Single':
                                        field.type = types.NUMBER;
                                        break;

                                    case 'Email':
                                        field.type = types.STRING;
                                        break;

                                    case 'Date':
                                        field.type = types.DATE;
                                        field.dateFormat = '';
                                        break;

                                    case 'Time':
                                        field.type = types.DATE;
                                        field.dateFormat = '';
                                        break;

                                    case 'DateTime':
                                        field.type = types.DATE;
                                        field.dateFormat = '';
                                        break;

                                    default:
                                        field.type = makeModelName(property.type);
                                        break;
                                }

                                switch (property.role) {
                                    case 'Required':
                                        field.useNull = false;
                                        break;

                                    case 'Identity':
                                        field.useNull = false;
                                        break;

                                    case 'Unique':
                                        field.useNull = false;
                                        break;
                                }
                            }

                            config.fields.push(field);
                        }
                    }

                    var model = Ext.define(name, config);

                    return model;
                },

                createPanel: function (directory, config) {

                    Ext.Object.merge(directory, {
                        buttons: {
                            refresh: Ext.create('Ext.Button', {
                                iconCls: 'icon-refresh',
                                text: 'Refresh',
                                scope: directory,
                                handler: directory.onRefreshClick
                            })
                        }
                    });

                    return Ext.create('Ext.tree.Panel', Ext.Object.merge({
                        header: false,
                        store: directory.store,
                        rootVisible: false,
                        useArrows: true,
                        listeners: {
                            selectionchange: {
                                fn: directory.onSelectionChange,
                                scope: directory
                            }
                        },
                        dockedItems: [
                            {
                                xtype: 'toolbar',
                                dock: 'bottom',
                                ui: 'footer',
                                margin: '6 0 3 0',
                                items: ['->', directory.buttons.refresh]
                            }
                        ]
                    }, config));
                },

                createStore: function (directory) {

                    return Ext.create('Ext.data.TreeStore', {
                        id: 'Ext.custom.data.Directory.Store',
                        autoLoad: true,
                        //defaultRootId: '0',
                        //defaultRootText: "text",
                        //defaultRootProperty: 'children',
                        folderSort: true,
                        // not using model. direct proxy
                        proxy: {
                            // Use for ajax proxy, since all the create, update and detroy requests will be all POST
                            // and for jsonp the api is the same, but the method is GET
                            type: 'ajax', // rest, jsonp or ajax.
                            buildUrl: function (request) {
                                switch (request.action) {
                                    case 'read':
                                        return directory.baseUrl + '/Data/Directory/' + name(request.operation.node);
                                }
                            },
                            headers: {
                                "Accept": "application/json"
                            },
                            listeners: {
                                exception: function (proxy, response, operation) {
                                    Ext.MessageBox.show({
                                        title: 'REMOTE EXCEPTION',
                                        msg: operation.getError(),
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.Msg.OK
                                    });
                                }
                            },
                            reader: {
                                type: "json",
                                root: "data",
                                totalProperty: 'total',
                                successProperty: 'success',
                                messageProperty: 'message'
                            }
                        },
                        root: {
                            text: "", // has to be empty
                            expanded: true,
                            loaded: false,
                        }
                    });
                }
            },

            constructor: function () {
                this.baseUrl = 'http://data.customary.com';
                this.store = Ext.custom.data.Directory.createStore(this);
                this.panel = Ext.custom.data.Directory.createPanel(this);
            },

            onRefreshClick: function () {
                this.store.load();
                Ext.custom.Adapter.publish('Ext.custom.data.Directory.selectionchange', this.panel.selModel);
            },

            onSelectionChange: function (selModel, selections, opts) {
                if (typeof selections == 'object' && selections.length > 0 && typeof selections[0].raw == 'object') {
                    this.record = Ext.Object.merge({}, selections[0].raw);

                    var noteType = selections[0].raw.type;
                    var nodeName = name(selections[0]);

                    switch (noteType) {

                        case 'area':
                            break;

                        case 'enum':
                            break;

                        case 'model':
                            Ext.custom.Factory.asyncModel(nodeName, function (modelName, model) {
                                Ext.custom.Adapter.publish('Ext.custom.data.Directory.selectionchange', model, this, selModel, selections);
                            });
                            break;

                        case 'name':
                            break;

                        case 'unit':
                            break;

                        case 'value':
                            break;
                    }

                    if (noteType === 'Model') {
                        
                    }
                } else {
                    delete this.record;
                    Ext.custom.Adapter.publish('Ext.custom.data.Directory.selectionchange', null, this, selModel, selections);
                }
            }
        };

    });
</script>
