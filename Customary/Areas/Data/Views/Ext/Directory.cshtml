<script type="text/javascript">
    // Create model, grid and forms for data definitions

    Ext.define('Ext.custom.data.Directory', function () {

        function fullName(node) {
            /// <param name="node" type="Ext.data.NodeInterface">
            /// </param>
            /// <returns type="String"></returns>
            var name = '/';
            if (typeof node.raw.Name === 'string') {
                name += node.raw.Name;
            }
            return name;
        }

        function createIndexStore(directory) {

            return Ext.create('Ext.data.TreeStore', {
                id: 'Ext.custom.data.Index.Store',
                autoLoad: true,
                //defaultRootId: '0',
                //defaultRootText: "text",
                //defaultRootProperty: 'children',
                model: Ext.define('Ext.custom.data.Index.Model', {
                    extend: 'Ext.data.Model',
                    idProperty: 'Id',
                    fields: [
                        {
                            name: 'Name'
                        },
                        {
                            name: 'Title'
                        },
                        {
                            name: 'Type'
                        },
                        {
                            name: 'LastModified',
                            mapping: 'LastModified',
                            type: 'date',
                            dateFormat: 'c'
                        },
                        {
                            name: '$Name',
                            persist: false,
                            mapping: 'Name',
                            convert: function (v, record) {
                                var name = v.split('/');
                                return name[name.length - 1];
                            }
                        },
                        {
                            name: '$Title',
                            persist: false,
                            mapping: 'Title',
                            convert: function (v, record) {
                                return Ext.custom.Adapter.toString(v || "<null>");
                            }
                        }
                    ]
                }),
                folderSort: true,
                // not using model. direct proxy
                proxy: {
                    // Use for ajax proxy, since all the create, update and detroy requests will be all POST
                    // and for jsonp the api is the same, but the method is GET
                    type: 'ajax', // rest, jsonp or ajax.
                    buildUrl: function (request) {
                        switch (request.action) {
                            case 'read':
                                return directory.baseUrl + '/Data' + fullName(request.operation.node) + '/$index';
                        }
                    },
                    headers: {
                        "Accept": "application/json"
                    },
                    listeners: {
                        exception: function (proxy, response, operation) {
                            Ext.MessageBox.show({
                                title: 'Request returned with an error message:',
                                msg: operation.getError(),
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.Msg.OK
                            });
                        }
                    },
                    reader: {
                        type: "json",
                        root: "data",
                        totalProperty: 'total',
                        successProperty: 'success',
                        messageProperty: 'message'
                    }
                },
                root: {
                    text: "", // has to be empty
                    expanded: true,
                    loaded: false,
                }
            });
        }

        // Get a nice decimal place precision for the scientific notation number.
        // e.g. 1.23e-7 yields 7+2 places after the decimal point
        // e.g. 4.5678e-11 yields 11+4 places after the decimal point
        function getPrecision(scinum) {
            var arr = new Array();
            // Get the exponent after 'e', make it absolute.  
            arr = scinum.split('e');
            var exponent = Math.abs(arr[1]);

            // Add to it the number of digits between the '.' and the 'e'
            // to give our required precision.
            var precision = new Number(exponent);
            arr = arr[0].split('.');
            precision += arr[1].length;

            return precision;
        }

        var s = "1.23e-7";
        // Handle exponential numbers.
        if (s.match(/^[-+]?[1-9]\.[0-9]+e[-]?[1-9][0-9]*$/)) {
            s = (+s).toFixed(getPrecision(s));
        }
        //returns 0.000000123

        function onRefreshClick() {
            this.indexStore.load();
            //Ext.custom.Adapter.publish('Ext.custom.data.Directory.selectionchange', this.panel.selModel);

            this._component.fireEvent('select', this);
        }

        function onTabChange(tabPanel, newTab, oldTab, eOpts) {
            tabPanel.setTitle(newTab.title);
        }

        function onIndexActivate(component, eOpts) {
            if (typeof this._indexRecord === 'object' && this._indexRecord !== null) {
                var selModel = component.getSelectionModel();
                var selected = selModel.selected;
                this._component.fireEvent('select', this, this._indexRecord, selModel, selected);
            }
            return true;
        }

        function onIndexDeactivate(component, eOpts) {
            this._component.fireEvent('select', this);
        }

        function onIndexSelectionChange(selModel, selections, opts) {
            if (typeof selections == 'object' && selections.length === 1 && typeof selections[0].raw == 'object') {

                var path = fullName(selections[0]);
                var data = selections[0].getData();
                this.typeName = data.Type;
                this._indexRecord = data;
                Ext.History.add(path, false);
                this._component.fireEvent('select', this, data, selModel, selections);
            } else {
                delete this._indexRecord;
                this._component.fireEvent('select', this);
            }
        }

        function onRecordsActivate(component, eOpts) {
            findToolItem('create', component, 'show').setHandler(function () { onRecordCreateClick.call(this, component) }, this);
            findToolItem('destroy', component, 'show').setHandler(function () { onRecordDestroyClick.call(this, component) }, this);
            if (typeof this._indexRecord === 'object' && this._indexRecord !== null) {
                var typeName = this._indexRecord.Name;
                Custom.app.Application.asyncMetadata.call(this, typeName, function ($) {
                    var modelName = Custom.app.Application.makeModelName(typeName);

                    this._recordsModel = Ext.ModelManager.getModel(modelName);
                    if (this._recordsModel === null || typeof this._recordsModel !== 'function') {
                        this._recordsModel = Custom.app.Application.defineModel(modelName, $);
                    }

                    var properties = Custom.app.Application.collectProperties($, []);

                    // grid panel (selector)
                    var config = Custom.app.Application.configGrid(properties, Custom.app.Application.selectColumns($), {
                        $modelName: modelName
                    });

                    this._recordsStore = Ext.create('Ext.data.Store', {
                        autoDestroy: false,// <- error if true
                        autoLoad: true,
                        batchActions: true,
                        /*listeners: {
                            add: {
                                fn: this.onDataChanged,
                                scope: this
                            },
                            datachanged: {
                                fn: this.onDataChanged,
                                scope: this
                            },
                            remove: {
                                fn: this.onDataChanged,
                                scope: this
                            },
                            update: {
                                fn: this.onDataChanged,
                                scope: this
                            },
                            write: function (proxy, operation) {
                                if (operation.action == 'destroy') {
                                    //master.child('#form').setActiveRecord(null);
                                }
                                //Ext.example.msg(operation.action, operation.resultSet.message);
                            }
                        },*/
                        //selModel: new Ext.selection.RowModel(),
                        model: this._recordsModel,
                        //proxy: this._recordsModel.getProxy( ),
                        pageSize: 100/*,
                sorters: [{
                    property: 'Name',
                    direction: 'ASC'
                }]*/
                    });

                    component.getSelectionModel().clearSelections(); // a must or you get an exception
                    component.reconfigure(this._recordsStore, config.columns.items);

                    /*this._recordsStore.load({
                        scope: this,
                        callback: function (records, operation, success) {
                            // the operation object
                            // contains all of the details of the load operation
                            console.log(records);
    
                            component.reconfigure(this._recordsStore);
                        }
                    });*/


                });
            }

            this._component.fireEvent('select', this);

            return true;
        }

        function onRecordsDeactivate(component, eOpts) {
            findToolItem('create', component, 'hide').setHandler(Ext.emptyFn);
            findToolItem('destroy', component, 'hide').setHandler(Ext.emptyFn);

            this._component.fireEvent('select', this);
            return true;
        }

        function onRecordCreateClick(component, eOpts) {
            console.log("Create click");
            this._component.fireEvent('beforeselect', function (procceed) {
                if (procceed) {
                    console.log('create');
                    var store = this._recordsStore;
                    var model = this._recordsModel;
                    var record = new model({
                        $type: this._indexRecord.name
                    });
                    record.$type = this._indexRecord.name;
                    store.addSorted(record);
                    var selModel = component.getView().getSelectionModel();
                    selModel.select(record, false, true);
                    onRecordSelectionChange.call(this, selModel, [record], eOpts);
                    this._component.fireEvent('create', record, model);
                }
            }, this);
        }

        function onRecordDestroyClick(component) {
            this._component.fireEvent('select', this);
            /*var record = component.getView().getSelectionModel().getSelection()[0];
            if (typeof record === 'object' && record != null) {
                record.destroy({ id: record.Id });
            }*/
            var selection = component.getView().getSelectionModel().getSelection();
            component.getStore().remove(selection);
            component.getStore().sync();
        }

        function onBeforeSelect(selModel, record, index, eOpts) {
            return this._component.fireEvent('beforeselect', function (procceed) {
                if (procceed) {
                    selModel.select(record, false, true);
                    onRecordSelectionChange.call(this, selModel, [record], eOpts);
                }
            }, this);
        }

        function onRecordSelectionChange(selModel, selections, eOpts) {

            if (typeof selections == 'object' && selections.length === 1 && typeof selections[0].raw == 'object') {

                var grid = selModel.view.up();

                if (typeof grid !== 'object' || grid === null || typeof grid.getStore !== 'function') {
                    return;
                }

                var store = grid.getStore();

                if (typeof store !== 'object' || store === null || typeof store.model !== 'function') {
                    return;
                }

                var record;

                var panel = grid.up('panel');

                if (typeof selections !== 'object' || selections === null) {
                    findToolItem('destroy', panel, 'disable');
                }
                else if (typeof selections.length === 'number') {
                    record = selections[0];
                    findToolItem('destroy', panel, 'enable');
                }
                else {
                    record = selected;
                    findToolItem('destroy', panel, 'enable');
                }

                var type = record.raw.$type, data = record.getData();

                this._component.fireEvent('select', this, { Id: data.Id, Type: type }, selModel, selections);
            }
            else {
                this._component.fireEvent('select', this);
            }
        }

        // copy from droplet
        function findToolItem(action, component, fn) {
            for (; typeof component === 'object' && component !== null; component = component.up()) {
                if (typeof component.getDockedItems === 'function') {
                    var toolbars = component.getDockedItems();
                    for (var i = 0; i < toolbars.length; i++) {
                        var toolbar = toolbars[i];
                        if (toolbar.xtype === 'toolbar') {
                            for (var j = 0; j < toolbar.items.length; j++) {
                                var item = toolbar.items.getAt(j);
                                if (typeof item == 'object' && item !== null && item.$action === action) {
                                    if (typeof fn === 'string' && typeof item[fn] === 'function') {
                                        var args = Array.prototype.slice.call(arguments, 3);
                                        item[fn].apply(item, args);
                                    }
                                    return item;
                                }
                            }
                        }
                    }
                }
            }
        }

        return {

            requires: [
                'Ext.custom.Adapter'
            ],

            statics: {
            },

            constructor: function () {
                this.baseUrl = 'http://data.customary.com';
                this.indexStore = createIndexStore(this);
            },

            initComponent: function (customConfig) {

                this._component = Ext.widget(Ext.merge({
                    activeTab: 0,
                    bodyStyle: frameStyle, // background color like frame
                    bodyBorder: false,
                    border: false,
                    collapsible: true,
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            items: [
                                {
                                    $action: 'create',
                                    disabled: false,
                                    hidden: true,
                                    iconCls: 'icon-new',
                                    scope: this,
                                    text: 'New',
                                    xtype: 'button'
                                },
                                {
                                    $action: 'destroy',
                                    disabled: true,
                                    hidden: true,
                                    iconCls: 'icon-delete',
                                    scope: this,
                                    text: 'Delete',
                                    xtype: 'button'
                                },
                                '->',
                                {
                                    $action: 'refresh',
                                    handler: onRefreshClick,
                                    iconCls: 'icon-refresh',
                                    scope: this,
                                    text: 'Refresh',
                                    xtype: 'button'
                                }
                            ],
                            margin: '6 0 3 0',
                            ui: 'footer'
                        }
                    ],
                    flex: 1,
                    header: false,
                    items: [
                        {
                            columns: [
                                {
                                    xtype: 'treecolumn', //this is so we know which column will show the tree
                                    text: 'Name',
                                    width: 200,
                                    sortable: true,
                                    dataIndex: '$Name',
                                    locked: true
                                },
                                {
                                    text: 'Title',
                                    flex: 1,
                                    dataIndex: '$Title',
                                    sortable: true
                                },
                                {
                                    text: 'Type',
                                    width: 100,
                                    dataIndex: 'Type',
                                    sortable: true
                                },
                                {
                                    text: 'Last Modified',
                                    flex: 2,
                                    dataIndex: 'LastModified',
                                    sortable: true
                                }
                                /*,
                                {
                                    //we must use the templateheader component so we can use a custom tpl
                                    xtype: 'templatecolumn',
                                    text: 'Duration',
                                    width: 150,
                                    sortable: true,
                                    dataIndex: 'duration',
                                    align: 'center',
                                    //add in the custom tpl for the rows
                                    tpl: Ext.create('Ext.XTemplate', '{duration:this.formatHours}', {
                                        formatHours: function (v) {
                                            if (v < 1) {
                                                return Math.round(v * 60) + ' mins';
                                            } else if (Math.floor(v) !== v) {
                                                var min = v - Math.floor(v);
                                                return Math.floor(v) + 'h ' + Math.round(min * 60) + 'm';
                                            } else {
                                                return v + ' hour' + (v === 1 ? '' : 's');
                                            }
                                        }
                                    })
                                },
                                {
                                    xtype: 'checkcolumn',
                                    header: 'Done',
                                    dataIndex: 'done',
                                    width: 40,
                                    stopSelection: false
                                },
                                {
                                    text: 'Edit',
                                    width: 40,
                                    menuDisabled: true,
                                    xtype: 'actioncolumn',
                                    tooltip: 'Edit task',
                                    align: 'center',
                                    icon: '../simple-tasks/resources/images/edit_task.png',
                                    handler: function (grid, rowIndex, colIndex, actionItem, event, record, row) {
                                        Ext.Msg.alert('Editing' + (record.get('done') ? ' completed task' : ''), record.get('task'));
                                    },
                                    // Only leaf level tasks may be edited
                                    isDisabled: function (view, rowIdx, colIdx, item, record) {
                                        return !record.data.leaf;
                                    }
                                }*/
                            ],
                            header: false,
                            listeners: {
                                activate: {
                                    fn: onIndexActivate,
                                    scope: this
                                },
                                beforedeactivate: {
                                    fn: onIndexDeactivate,
                                    scope: this
                                },
                                selectionchange: {
                                    fn: onIndexSelectionChange,
                                    scope: this
                                }
                            },
                            rootVisible: false,
                            store: this.indexStore,
                            title: 'Index',
                            useArrows: true,
                            xtype: 'treepanel'
                        },
                        {
                            dockedItems: [
                                {
                                    dock: 'top',
                                    ui: 'header',
                                    xtype: 'triggerfield',
                                    trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',
                                    trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',
                                    height: 18,
                                    margin: '0 0 5 0',
                                    hasSearch: false,
                                    scope: this,
                                    listConfig: {
                                        loadingText: 'Searching...',
                                        emptyText: 'No matching posts found.',
                                        // Custom rendering template for each item
                                        getInnerTpl: function () {
                                            return '<b>{name} </b> ({namespace})';
                                        }
                                    }
                                }
                            ],
                            header: false,
                            multiSelect: true,
                            listeners: {
                                activate: {
                                    fn: onRecordsActivate,
                                    scope: this
                                },
                                beforeedit: {
                                    fn: function (editor, e) {
                                        // readonly?
                                        return true;
                                    },
                                    scope: this
                                },
                                beforedeactivate: {
                                    fn: onRecordsDeactivate,
                                    scope: this
                                },
                                edit: {
                                    fn: function (editor, e) {
                                        // Fires after a row is edited. The edit event object has the following properties 
                                        // * grid - The grid this editor is on
                                        // * view - The grid view
                                        // * store - The grid store
                                        // * record - The record being edited
                                        // * row - The grid table row
                                        // * column - The grid Column defining the column that initiated the edit
                                        // * rowIdx - The row index that is being edited
                                        // * colIdx - The column index that initiated the edit
                                        //e.record.commit();
                                        //this.onDataChanged(e.store, "master");

                                        // Check if dirty. It will also refesh the visual status.
                                        droplet.isDirty();

                                        return true;
                                    },
                                    scope: this
                                },
                                render: function (grid) {
                                    var view = grid.getView();    // Capture the grid's view.
                                    grid.tip = Ext.create('Ext.tip.ToolTip', {
                                        target: view.el,          // The overall target element.
                                        delegate: view.itemSelector, // Each grid row causes its own seperate show and hide.
                                        trackMouse: true,         // Moving within the row should not hide the tip.
                                        renderTo: Ext.getBody(),  // Render immediately so that tip.body can be referenced prior to the first show.
                                        listeners: {              // Change content dynamically depending on which element triggered the show.
                                            beforeshow: function updateTipBody(tip) {
                                                tip.update('Over company ');
                                            }
                                        }
                                    });
                                },
                                beforeselect: {
                                    fn: onBeforeSelect,
                                    scope: this
                                },
                                selectionchange: {
                                    fn: onRecordSelectionChange,
                                    scope: this
                                },
                                validateedit: {
                                    fn: function (editor, e, eOpts) {

                                        return true;

                                        var me = this,
                                            rowIdx = e.rowIdx, // row index
                                            fieldName = e.field,
                                            newVal = e.value,
                                            storeRow = this.store.getAt(rowIdx);

                                        // assuming valid input, proceed with the below    
                                        storeRow.set(fieldName, newVal);

                                        // if modified records > 0 then enable buttons
                                        var enableButtons = Boolean(me.store.getModifiedRecords().length);

                                        if (enableButtons) {
                                            // enable buttons
                                        } else {
                                            // disable buttons
                                        }
                                    },
                                    scope: this
                                }
                            },
                            columns: {
                                items: []
                            },
                            plugins: [
                                {
                                    autoCancel: true,
                                    clicksToEdit: 2,
                                    clicksToMoveEditor: 1,
                                    ptype: 'rowediting'
                                }
                            ],
                            selModel: 'rowmodel',
                            /*selModel: Ext.create("Ext.selection.RowModel", {
                                selType: "rowmodel",
                                listeners: {
                                    selectionchange: {
                                        fn: onRecordSelectionChange(selModel, selections),
                                        scope: this
                                    }
                                }
                            }),*/
                            title: 'Data',
                            tooltip: 'Selected model data records',
                            xtype: 'gridpanel',

                        }
                    ],
                    layout: 'fit',
                    listeners: {
                        add: {
                            fn: function (tabPanel, component, index, eOpts) {
                                if (typeof tabPanel.title !== 'string') {
                                    tabPanel.setTitle(component.title);
                                }
                            },
                            scope: this
                        },
                        tabchange: {
                            fn: onTabChange,
                            scope: this
                        }
                    },
                    margins: '0 0 0 5',
                    split: true,
                    xtype: 'tabpanel'
                }, customConfig));

                return this._component;
            }
        };

    });
</script>
